// Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
// Output: 15

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int getdepth(TreeNode* root) {
        if (!root) return 0;
        return max(getdepth(root->left), getdepth(root->right)) + 1;
    }
    
    int deepestLeavesSum(TreeNode* root) {
        int depth = getdepth(root);
        
        queue<TreeNode*> q;
        q.push(root);
        
        int sum = 0;
        
        for (int i = 1; i <= depth; i++) {
            int size = q.size();
            
            for (int j = 0; j < size; j++) {
                TreeNode* node = q.front();
                q.pop();
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
                
                if (i == depth) sum += node->val;
            }
        }
        
        return sum;
    }
};
