// Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]
// Output: 3
// Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).

class Solution {
public:
    
    static bool cmp(vector<int>& v1, vector<int>& v2) {
        if(v1[0] == v2[0]) return v1[1] > v2[1];
        return v1[0] < v2[0];
    }
    
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        int size = envelopes.size();
        
        // sorting by height & if we encounter same height
        // sort by descending order of width
        
        sort(envelopes.begin(), envelopes.end(), cmp);
        
        // e.g. -> env => (3,8) (4,5) (2,1) (2,6) (7,8) (5,3) (5,7)
        // sorted version => (2,6) (2,1) (3,8) (4,5) (5,7) (5,3) (7,8)
        
        // Now, we only need to care about width
        // So, as of now we only need to look upon v[i][1]
        // [ 6, 1, 8, 5, 7, 3, 8 ]
        
        // Now, we can only put envolop a in envolop b another if width of a is
        // less than width of b, or we can say we need an envolop whose width
        // is just greater than envolop a ( height we have already handled )
        // So, we can think of lower_bound and Longest Increasing Subsequence
        
        // because we have sorted all envolopes of a particular height
        // by descending order of width, one envolope will not interfare with 
        // another envolop of same height, if we apply lower_bound
        // i.e. first elem greater than equal to itself in list
        
        vector<int> list;
        
        for(int i = 0; i < size; i++){
            int ele = envelopes[i][1];
            
            // 在指定区域内查找不小于目标值的第一个元素
            int idx = lower_bound(list.begin(), list.end(), ele) - list.begin();
            
            if (idx >= list.size()) {
                list.push_back(ele);
            } else {
                list[idx] = ele;
            }
        }
        
        return list.size();
    }
};
