// Input: nums = [1,1,2,3,3,4,4,8,8]
// Output: 2

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int size = nums.size();
        if (size == 1) return nums[0];
        
        // 将right初始化成size-2或者size-1都可以，size-1比较常见
        // e.g. 1 1 2 3 3 4 4, left=0 right=6 mid=3 mid^1=2
        // e.g. 1 1 2 2 3 3 4 5 5, left=0 right=8 mid=4 mid^1=5
        // e.g. 1 2 2, left=0 right=2 mid=1 mid^1=0
        // e.g. 1 1 2, left=0 right=2 mid=1 mid^1=0
        
        int left = 0, right = size - 1;
        int mid;
        
        while (left <= right) {
            mid = left + (right - left) / 2;
            // 左半边有序
            if (nums[mid] == nums[mid^1]) {
                left = mid + 1;
            }
            // 右半边有序
            else {
                right = mid - 1;
            }
        }
        
        return nums[left];
    }
};
