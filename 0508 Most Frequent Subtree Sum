// Input: root = [5,2,-3]
// Output: [2,-3,4]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    // 后序遍历：左 右 中
    int postorder(TreeNode* root) {
        if (!root) return 0;
            
        int left = postorder(root->left);
        int right = postorder(root->right);
        
        // 处理当前结点
        int sum = left + right + root->val;
        map[sum]++;
        
        // 类似0501的写法
        if (map[sum] > maxcnt) {
            maxcnt = map[sum];
            res.clear();
        }
        
        if (map[sum] == maxcnt) {
            res.push_back(sum);
        }
        
        return sum;
    }
    
    
    vector<int> findFrequentTreeSum(TreeNode* root) {
        int val = postorder(root);
        return res;
    }

private:
    unordered_map<int, int> map;
    vector<int> res;
    int maxcnt = 0;
};
