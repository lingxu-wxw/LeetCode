class Solution {
public:
    
    // Input: m = 3, n = 2
    // Output: 3
    // Explanation:
    // From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
    // 1. Right -> Right -> Down
    // 2. Right -> Down -> Right
    // 3. Down -> Right -> Right
    
    int uniquePaths(int m, int n) {
        //大致思路: 动态规划, m是高, n是宽
        
        //特殊情况: 一条直线
        if (m == 1 || n == 1) return 1;
        
        //初值全都设为0
        vector<vector<int> > dp(m, vector<int>(n, 0));
        
        //边缘线上应该都是1
        for (int j = 1; j < n; j++) dp[0][j] = 1;
        for (int i = 1; i < m; i++) dp[i][0] = 1;
        
        //动态规划
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                //转移方程
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }
        
        return dp[m-1][n-1];
    }
};
