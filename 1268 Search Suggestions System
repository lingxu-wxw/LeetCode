// Input: products = ["mobile","mouse","moneypot","monitor","mousepad"], searchWord = "mouse"
// Output: [
// ["mobile","moneypot","monitor"],
// ["mobile","moneypot","monitor"],
// ["mouse","mousepad"],
// ["mouse","mousepad"],
// ["mouse","mousepad"]
// ]
// Explanation: products sorted lexicographically = ["mobile","moneypot","monitor","mouse","mousepad"]
// After typing m and mo all products match and we show user ["mobile","moneypot","monitor"]
// After typing mou, mous and mouse the system suggests ["mouse","mousepad"]

class TrieNode {
public:
	TrieNode* child[26];
	bool isWord;

	int minidx;
	int maxidx;

	// root trienode
	TrieNode() : isWord(false), minidx(INT_MIN), maxidx(INT_MAX) {
		for (auto &p : child) {
			p = NULL;
		}
	}

	// normal trienode
	TrieNode(int idx) : isWord(false), minidx(idx), maxidx(idx) {
		for (auto &p : child) {
			p = NULL;
		}
	}
};

class Trie {
private:
	TrieNode* root;

public:
	Trie() {
		root = new TrieNode();
	}
	
	void insert(string word, int idx) {
		TrieNode* p = root;

		for (auto &s : word) {
			int i = s - 'a';
			if (!p->child[i]) {
				p->child[i] = new TrieNode(idx);
			}

			if (idx < p->minidx) {
				p->minidx = idx;
			}
			if (idx > p->maxidx) {
				p->maxidx = idx;
			}

			p = p->child[i];
		}

		p->isWord = true;
	}

	bool startsWith(string prefix, int& minidx, int& maxidx) {
		TrieNode* p = root;

		for (auto &s : prefix) {
			int i = s - 'a';
			if (!p->child[i]) {
				return false;
			}

			p = p->child[i];
		}

		minidx = p->minidx;
		maxidx = p->maxidx;

		return true;
	}
};

class Solution {
public:
    vector<vector<string>> suggestedProducts(vector<string>& products, string searchWord) {
        sort(products.begin(), products.end());

        Trie* trie = new Trie();
        for (int i = 0; i < products.size(); i++) {
            trie->insert(products[i], i);
        }
        
        vector<vector<string>> res;

        string prefix = "";
        for (int i = 0; i < searchWord.size(); i++) {
            prefix += searchWord[i];
            int minidx, maxidx;

            if (trie->startsWith(prefix, minidx, maxidx)) {
                vector<string> ans;
                for (int j = minidx; j <= min(minidx + 2, maxidx); j++) {
                    ans.push_back(products[j]);
                }
                res.push_back(ans);
            } else {
                res.push_back({});
            }
        }
        
        return res;
    }
};
