// Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]
// Output: 4
// Explanation: After the rain, water is trapped between the blocks.
// We have two small pounds 1 and 3 units trapped.
// The total volume of water trapped is 4.

// Input: heightMap = [[12,13,1,12],[13,4,13,12],[13,8,10,12],[12,13,12,12],[13,13,13,13]]
// Output: 14

class Solution {
public:
    
    // 不能使用 042 Trapping Rain Water 的思路，因为3维的围栏不只是上下左右四个位置
    
    int trapRainWater(vector<vector<int>>& heightMap) {
        int height = heightMap.size();
        int width = heightMap[0].size();
        
        // BFS遍历方向，上下左右
        vector<vector<int>> direction = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        // 访问标记，已经访问过的格点不会再次遍历
        vector<vector<bool>> visited(height, vector<bool>(width, false));
        
        // 优先队列，这种写法是最小堆，front()是最小值
        // pair.first 格点的高度/用于排序，pair.second i*width+j，已经被访问过的格点会加入pq
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        
        // 当前海平面，格点高度低于海平面的能够蓄水
        int seaLevel = 0;
        
        // 总蓄水量
        int res = 0;
        
        
        // 初始化，边缘一圈的格点都不能蓄水
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                if (i == 0 || i == height-1 || j == 0 || j == width-1) {
                    visited[i][j] = true;
                    pq.push({heightMap[i][j], i * width + j});
                }
            }
        }
        
        // 依次从pq中取出格点处理，更新海平面，向四周遍历，更新蓄水量
        while (!pq.empty()) {
            auto pair = pq.top(); pq.pop();
            
            int i = (pair.second) / width;
            int j = (pair.second) % width;
            
            // 更新海平面
            seaLevel = max(seaLevel, pair.first);
            
            // 向四周遍历
            for (auto dir : direction) {
                int newi = i + dir[0];
                int newj = j + dir[1];
                
                if (newi < 0 || newi >= height || newj < 0 || newj >= width || visited[newi][newj]) continue;
                
                visited[newi][newj] = true;
                pq.push({heightMap[newi][newj], newi * width + newj});
                
                // 更新蓄水量
                if (heightMap[newi][newj] < seaLevel) {
                    res += (seaLevel - heightMap[newi][newj]);
                }
             }
        }
        
        return res;
    }
};
