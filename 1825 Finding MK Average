// Input
// ["MKAverage", "addElement", "addElement", "calculateMKAverage", "addElement", "calculateMKAverage", "addElement", "addElement", "addElement", "calculateMKAverage"]
// [[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]
// Output
// [null, null, null, -1, null, 3, null, null, null, 5]

// Explanation
// MKAverage obj = new MKAverage(3, 1); 
// obj.addElement(3);        // current elements are [3]
// obj.addElement(1);        // current elements are [3,1]
// obj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.
// obj.addElement(10);       // current elements are [3,1,10]
// obj.calculateMKAverage(); // The last 3 elements are [3,1,10].
//                           // After removing smallest and largest 1 element the container will be [3].
//                           // The average of [3] equals 3/1 = 3, return 3
// obj.addElement(5);        // current elements are [3,1,10,5]
// obj.addElement(5);        // current elements are [3,1,10,5,5]
// obj.addElement(5);        // current elements are [3,1,10,5,5,5]
// obj.calculateMKAverage(); // The last 3 elements are [5,5,5].
//                           // After removing smallest and largest 1 element the container will be [5].
//                           // The average of [5] equals 5/1 = 5, return 5

class MKAverage {
public:
    MKAverage(int m, int k) {
        totalsum = 0;
        start = 0;
        end = 0;
        this->m = m;
        this->k = k;
    }
    
    void addElement(int num) {
        nums.push_back(num);
        lastM[num]++;
        totalsum += num;
        end++;
        
        if (end - start > m) {
            lastM[nums[start]]--;
            if (lastM[nums[start]] == 0) {
                lastM.erase(nums[start]);
            }
            totalsum -= nums[start];
            start++;
        }
    }
    
    int calculateMKAverage() {
        if (end - start < m) return -1;
        
        int minKval = 0, maxKval = 0;
        
        int n = k;
        auto iter = lastM.begin();
        while (n) {
            minKval += iter->first * min(iter->second, n);
            n -= min(iter->second, n);
            if (n) {
                iter++;
            }
        }
        
        n = k;
        auto riter = lastM.rbegin();
        while (n) {
            maxKval += riter->first * min(riter->second, n);
            n -= min(riter->second, n);
            if (n) {
                riter++;
            }
        }
        
        return (totalsum - minKval - maxKval) / (m - 2*k);
    }

private:
    vector<int> nums;
    map<int, int> lastM;  // 自带排序功能
    long long totalsum;
    int start, end;
    int m, k;
};

/**
 * Your MKAverage object will be instantiated and called as such:
 * MKAverage* obj = new MKAverage(m, k);
 * obj->addElement(num);
 * int param_2 = obj->calculateMKAverage();
 */
