// Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
// Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    // 类似530的思路，倒序中序遍历
    
    void inorder(TreeNode* root, int& sum) {
        if (!root) return;
        
        // 遍历右子树的全部部分，会先深入到最大的数
        inorder(root->right, sum);
        
        // 修改BST值
        sum += root->val;
        root->val = sum;
        
        // 遍历左子树的全部部分
        inorder(root->left, sum);
    }
    
    TreeNode* convertBST(TreeNode* root) {
        int sum = 0;
        
        inorder(root, sum);
        
        return root;
    }
};
