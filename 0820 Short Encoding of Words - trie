// Input: words = ["time", "me", "bell"]
// Output: 10
// Explanation: A valid encoding would be s = "time#bell#" and indices = [0, 2, 5].
// words[0] = "time", the substring of s starting from indices[0] = 0 to the next '#' is underlined in "time#bell#"
// words[1] = "me", the substring of s starting from indices[1] = 2 to the next '#' is underlined in "time#bell#"
// words[2] = "bell", the substring of s starting from indices[2] = 5 to the next '#' is underlined in "time#bell#"

class TrieNode {
public:
    TrieNode* child[26];
    int childcnt;  // 当前节点的孩子数量

    TrieNode() : childcnt(0) {
        for (auto &p : child) {
            p = NULL;
        }
    }

    TrieNode* insertChar(char c) {
        int i = c - 'a';
        if (!child[i]) {
            child[i] = new TrieNode();
            childcnt++;
        }
        return child[i];
    }
};

class Solution {
public:
    int minimumLengthEncoding(vector<string>& words) {
        TrieNode* root = new TrieNode();
        unordered_map<TrieNode*, int> map;  // last trienode - encode len
        
        for (string &word : words) {
            TrieNode* cur = root;
            int len = word.length();
            
            for (int i = len - 1; i >= 0; i--) {
                cur = cur->insertChar(word[i]);
            }
            map[cur] = len + 1;
        }
        
        int minlen = 0;
        for (auto &iter : map) {
            if (iter.first->childcnt == 0) {
                minlen += iter.second;
            }
        }
        
        return minlen;
    }
};
