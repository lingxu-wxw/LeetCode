// Input: nums = [3,10,5,25,2,8]
// Output: 28
// Explanation: The maximum result is 5 XOR 25 = 28.

class Solution {
public:
    
    // XOR 相同位置0，不同位置1： ^, xor
    
    int findMaximumXOR(vector<int>& nums) {
        
        int res = 0;
        int mask = 0;
        
        // 从第31位开始往回走，高位能满足的话，结果会更大
        for (int i = 31; i >= 0; i--) {
            mask = mask | (1<<i);
            
            // 当前轮次所有num经过mask后的结果
            unordered_set<int> set;
            for (int num : nums) {
                set.insert(num & mask);
            }
            
            // 当前轮次理想状态的最大值，不一定能够达成
            int expect = res | (1<<i);
            for (auto num : set) {
                if (set.find(expect ^ num) != set.end()) {
                    res = expect;
                    break;
                }
            }
        }
        
        return res;
    }
};
