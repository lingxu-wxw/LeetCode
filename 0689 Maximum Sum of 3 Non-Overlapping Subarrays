// Input: nums = [1,2,1,2,6,7,5,1], k = 2
// Output: [0,3,5]
// Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].
// We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.

class Solution {
public:
    
    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
        // 题目保证1 <= k <= floor(nums.length / 3)
        int size = nums.size();
        if (k*3 > size) return {};
        
        // 计算连续k个数的和
        vector<int> sums(size, -1);
        int sum = 0;
        
        for (int i = 0; i < k; i++) {
            sum += nums[i];
        }
        sums[0] = sum;
        
        for (int i = k; i < size; i++) {
            sum = sum - nums[i-k] + nums[i];
            sums[i-k+1] = sum;
        }
        
        // 计算当前idx左侧和右侧 完整的最大的连续k个数的起始位置
        vector<int> left(size, -1);
        vector<int> right(size, -1);
        
        int leftmax = 0;
        for (int i = k; i < size; i++) {
            // left保证idx小，要严格大于
            if (sums[i-k] > leftmax) {
                leftmax = sums[i-k];
                left[i] = i-k;
            } else {
                left[i] = left[i-1];
            }
        }
        
        int rightmax = 0;
        for (int i = size-1-k; i >= 0; i--) {
            // right保证idx小，要大于等于
            if (sums[i+1] >= rightmax) {
                rightmax = sums[i+1];
                right[i] = i+1;
            } else {
                right[i] = right[i+1];
            }
        }    
        
        // 寻找满足条件的三个subarray
        int maxsum = 0;
        vector<int> res(3, 0);
        
        for (int i = k; i <= size-2*k; i++) {
            int leftidx = left[i];
            int rightidx = right[i+k-1];
            if (leftidx == -1 || rightidx == -1) continue;
            if (sums[leftidx] == -1 || sums[rightidx] == -1) continue;
            
            int cursum = sums[leftidx] + sums[i] + sums[rightidx];
            
            if (cursum > maxsum) {
                maxsum = cursum;
                res[0] = leftidx;
                res[1] = i;
                res[2] = rightidx;
            }
        }
        
        return res;
    }
};
