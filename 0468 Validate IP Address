// A valid IPv4 address is an IP in the form "x1.x2.x3.x4" where 0 <= xi <= 255 and xi cannot contain leading zeros. 

// For example, "192.168.1.1" and "192.168.1.0" are valid IPv4 addresses but "192.168.01.1", 
// while "192.168.1.00" and "192.168@1.1" are invalid IPv4 addresses.

// A valid IPv6 address is an IP in the form "x1:x2:x3:x4:x5:x6:x7:x8" where:
//  1. 1 <= xi.length <= 4
//  2. xi is a hexadecimal string which may contain digits, lower-case English letter ('a' to 'f') and upper-case English letters ('A' to 'F').
//  3. Leading zeros are allowed in xi.

// For example, "2001:0db8:85a3:0000:0000:8a2e:0370:7334" and "2001:db8:85a3:0:0:8A2E:0370:7334" are valid IPv6 addresses, 
// while "2001:0db8:85a3::8A2E:037j:7334" and "02001:0db8:85a3:0000:0000:8a2e:0370:7334" are invalid IPv6 addresses.

class Solution {
public:
    string validIPAddress(string IP) {
        
        istringstream is(IP);
        
        string str = "";
        int cnt = 0;
        
        // Check IPv4
        if (IP.find('.') != string::npos) {
            
            while (getline(is, str, '.')) {
                cnt++;
                
                if (cnt > 4 || str.empty() || (str.size() > 1 && str[0] == '0') || str.size() > 3) {
                    return "Neither";
                }
                
                for (char c : str) {
                    if (c < '0' || c > '9') {
                        return "Neither";
                    }
                }
                
                int val = stoi(str);
                if (val < 0 || val > 255) {
                    return "Neither";
                }
            }
            
            return (cnt == 4 && IP.back() != '.') ? "IPv4" : "Neither";
        } 
        
        // Check IPv6
        else if (IP.find(':') != string::npos) {
            
            while (getline(is, str, ':')) {
                cnt++;
                
                if (cnt > 8 || str.empty() || str.size() > 4) {
                    return "Neither";
                }
                
                for (char c : str) {
                    if (!(c >= '0' && c <= '9') && !(c >= 'a' && c <= 'f') && !(c >= 'A' && c <= 'F')) {
                        return "Neither";
                    }
                }
            }
            
            return (cnt == 8 && IP.back() != ':') ? "IPv6" : "Neither";
        }
        
        return "Neither";
    }
};
