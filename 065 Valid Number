class Solution {
public:
    
    // 有限状态机
    // Numbers 0-9
    // Exponent - "e"
    // Positive/negative sign - "+"/"-"
    // Decimal point - "."
    
    bool isNumber(string s) {
        
        //输入类型
        enum InputType {
            INVALID,    // 0 字母,括号等
            SPACE,      // 1 空格
            SIGN,       // 2 符号 '+'/'-'
            DIGIT,      // 3 数字
            DOT,        // 4 点 '.'
            EXPONENT    // 5 扩展 'e'/'E'
        };
        
        //状态转移矩阵
        int transTable[][6] = {
        //  INV 空格 符号 数字 点 扩展
            -1,  0,  3,  1,  2, -1,     // 状态0: 初始无输入或者只有space的状态
            -1,  8, -1,  1,  4,  5,     // 状态1: 输入了数字之后的状态
            -1, -1, -1,  4, -1, -1,     // 状态2: 前面无数字，输入了Dot的状态
			      -1, -1, -1,  1,  2, -1,     // 状态3: 前面无数字，输入了符号状态
			      -1,  8, -1,  4, -1,  5,     // 状态4: 前面有数字和有dot的状态
            -1, -1,  6,  7, -1, -1,     // 状态5: 'e' or 'E'输入后的状态
            -1, -1, -1,  7, -1, -1,     // 状态6: 输入e之后输入Sign的状态
            -1,  8, -1,  7, -1, -1,     // 状态7: 输入e后输入数字的状态
            -1,  8, -1, -1, -1, -1,     // 状态8: 前面有有效数输入之后，输入space的状
        };
        
        int state = 0;
        int i = 0, slen = s.length();
        
        while (i < slen) {
            //获取输入
            InputType input = INVALID;
            if (s[i] == ' ')    input = SPACE;
            else if (s[i] == '+' || s[i] == '-')    input = SIGN;
            else if (isdigit(s[i]))     input = DIGIT;
            else if (s[i] == '.')       input = DOT;
            else if (s[i] == 'e' || s[i] == 'E')    input = EXPONENT;
            
            //状态转移
            state = transTable[state][input];
            if (state == -1) return false;
            
            i++;
        }
        
        return state == 1 || state == 4 || state == 7 || state == 8;
        
    }
};
