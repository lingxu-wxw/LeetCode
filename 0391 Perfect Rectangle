// Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]
// Output: true
// Explanation: All 5 rectangles together form an exact cover of a rectangular region.

class Solution {
public:
    bool isRectangleCover(vector<vector<int>>& rectangles) {
        int xmin = INT_MAX, xmax = INT_MIN;
        int ymin = INT_MAX, ymax = INT_MIN;
        
        int totalarea = 0;
        int expectarea;
        
        // 最终成图中，每个点可以被1-4个小矩形共用，最终只被一个矩形共用的是四角
        unordered_set<string> set;
        string leftbot, leftup, rightbot, rightup;
        
        for (auto rect : rectangles) {
            // 找到边界的x和y，判断面积大小是否相同
            xmin = min(xmin, rect[0]);
            ymin = min(ymin, rect[1]);
            xmax = max(xmax, rect[2]);
            ymax = max(ymax, rect[3]);
            
            totalarea += (rect[2] - rect[0]) * (rect[3] - rect[1]);
            
            // 判断四个边界点被多少矩形所共用
            leftbot = to_string(rect[0]) + "-" + to_string(rect[1]);
            leftup = to_string(rect[0]) + "-" + to_string(rect[3]);
            rightbot = to_string(rect[2]) + "-" + to_string(rect[1]);
            rightup = to_string(rect[2]) + "-" + to_string(rect[3]);
            
            if (set.count(leftbot)) {
                set.erase(leftbot);
            } else {
                set.insert(leftbot);
            }
            
            if (set.count(leftup)) {
                set.erase(leftup);
            } else {
                set.insert(leftup);
            }
            
            if (set.count(rightbot)) {
                set.erase(rightbot);
            } else {
                set.insert(rightbot);
            }
            
            if (set.count(rightup)) {
                set.erase(rightup);
            } else {
                set.insert(rightup);
            }
        }
        
        // 判断实际面积和预期面积是否相同
        expectarea = (xmax - xmin) * (ymax - ymin); 
        
        // 判断四个边界点是否都在set中
        leftbot = to_string(xmin) + "-" + to_string(ymin);
        leftup = to_string(xmin) + "-" + to_string(ymax);
        rightbot = to_string(xmax) + "-" + to_string(ymin);
        rightup = to_string(xmax) + "-" + to_string(ymax);
        
        if (!set.count(leftbot) || !set.count(leftup) || !set.count(rightbot) || !set.count(rightup)) {
            return false;
        }
        
        return (set.size() == 4) && (totalarea == expectarea);
    }
};
