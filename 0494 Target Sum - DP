// Input: nums = [1,1,1,1,1], target = 3
// Output: 5
// Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
// -1 + 1 + 1 + 1 + 1 = 3
// +1 - 1 + 1 + 1 + 1 = 3
// +1 + 1 - 1 + 1 + 1 = 3
// +1 + 1 + 1 - 1 + 1 = 3
// +1 + 1 + 1 + 1 - 1 = 3

class Solution {
public:
            
    int findTargetSumWays(vector<int>& nums, int target) {
        
        int size = nums.size();
        
        // 遍历到 i 为止的时候，和为 j 的情况个数
        // 和的结果没有稳定上界，所以使用map比较好
        vector<unordered_map<int, int>> dp(size+1);
        dp[0][0] = 1;
        
        for (int i = 1; i <= size; i++) {
            for (auto iter : dp[i-1]) {
                int plus = iter.first + nums[i-1];
                int minus = iter.first - nums[i-1];
                
                dp[i][plus] += iter.second;
                dp[i][minus] += iter.second;
            }
        }
        
        return dp[size][target];
    }
};
