// Input: root = [1,2,3,4]
// Output: "1(2(4))(3)"
// Explanation: Originallay it needs to be "1(2(4)())(3()())", but you need to omit all the unnecessary empty parenthesis pairs. And it will be "1(2(4))(3)"

// Input: root = [1,2,3,null,4]
// Output: "1(2()(4))(3)"
// Explanation: Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:    
    string tree2str(TreeNode* root) {
        if (!root) return "";
        
        string left = tree2str(root->left);
        string right = tree2str(root->right);
        
        string res = "";
        
        // 左空 右空
        if (left == "" && right == "") {
            res = to_string(root->val);    
        }
        // 左不空 右空
        else if (right == "") {
            res =  to_string(root->val) + "(" + left + ")";    
        } 
        // 左空/左不空 右不空
        else {
            res = to_string(root->val) + "(" + left + ")(" + right + ")";
        }
        
        return res;
    }
};
