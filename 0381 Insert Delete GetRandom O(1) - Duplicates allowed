// Input
// ["RandomizedCollection", "insert", "insert", "insert", "getRandom", "remove", "getRandom"]
// [[], [1], [1], [2], [], [1], []]
// Output
// [null, true, false, true, 2, true, 1]

class RandomizedCollection {
public:
    /** Initialize your data structure here. */
    RandomizedCollection() {
        
    }
    
    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
    bool insert(int val) {
        // 允许重复，要先插入，再判断return true/false
        nums.push_back(val);
        map[val].push(nums.size()-1);
        return map[val].size() == 1;
    }
    
    /** Removes a value from the collection. Returns true if the collection contained the specified element. */
    bool remove(int val) {
        if (map[val].empty()) return false;
        
        // 删除时应该默认删除重复元素中idx最大的元素
        int idx = map[val].top();
        map[val].pop();
        // 将val和lastval调换位置
        if (idx != nums.size()-1) {
            int lastval = nums.back();
            nums[idx] = lastval;
            map[lastval].pop();
            map[lastval].push(idx);
        }
        nums.pop_back();
    
        return true;
    }
    
    /** Get a random element from the collection. */
    int getRandom() {
        return nums[rand() % nums.size()];
    }
    
private:
    // 用priority_queue代替int来存放 数值val 对应的 idx
    vector<int> nums;
    unordered_map<int, priority_queue<int>> map;
};

/**
 * Your RandomizedCollection object will be instantiated and called as such:
 * RandomizedCollection* obj = new RandomizedCollection();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
