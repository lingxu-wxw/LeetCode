// Input: nums = [10,5,2,6], k = 100
// Output: 8
// Explanation: The 8 subarrays that have product less than 100 are:
// [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]
// Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.

class Solution {
public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        int size = nums.size();
      
        // 记录当前乘积
        int product = 1;
        
        // 记录当前子串长度, 以及子串的初始值
        int sublen = 0;
        int startidx = -1;
        
        int res = 0;
        
        for (int i = 0; i < size; i++) {
            // 如果当前数字就比k大，不可能有以nums[i]为结尾的subarray满足要求
            if (nums[i] >= k) {
                product = 1;
                sublen = 0;
                startidx = -1;
                continue;
            }
            
            // nums[i] 直接加入subarray
            product = product * nums[i];
            sublen++;
            if (sublen == 1) {
                startidx = i;
            }
            
            // 有必要调整滑动窗口的左边界
            if (product >= k) {
                // 向右移动一位startidx
                while (startidx < i && sublen > 0 && product >= k) {
                    product = product / nums[startidx];
                    sublen--;
                    startidx++;
                }
            }
            
            // 以nums[i]为结尾，sublen中任何一个idx为起始都可以满足要求
            res += sublen;
        }
        
        return res;
        
    }
};
