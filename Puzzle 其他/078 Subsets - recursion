class Solution {
public:
    
    // Input: nums = [1,2,3]
    // Output:
    // [
    //   [3],
    //   [1],
    //   [2],
    //   [1,2,3],
    //   [1,3],
    //   [2,3],
    //   [1,2],
    //   []
    // ]
    
    void subsetsDFS(vector<int> &nums, int idx, vector<int> &out, vector<vector<int> > &res) {
        // 深度搜索到底了
        if (idx == nums.size()) {
            res.push_back(out);
            return;
        }
        
        // 不选nums[idx]
        subsetsDFS(nums, idx + 1, out, res);
        
        // 选nums[idx]
        out.push_back(nums[idx]);
        subsetsDFS(nums, idx + 1, out, res);
        
        out.pop_back();
    }
    
    vector<vector<int>> subsets(vector<int>& nums) {
        // 想法2: 对于单个子集，每个元素都有在子集中和不在子集中两种可能 
        
        vector<vector<int>> res;
        vector<int> out;
       
        subsetsDFS(nums, 0, out, res);
        
        return res;
    }
};
