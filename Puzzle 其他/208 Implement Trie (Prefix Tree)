// Trie trie = new Trie();
// trie.insert("apple");
// trie.search("apple");   // returns true
// trie.search("app");     // returns false
// trie.startsWith("app"); // returns true
// trie.insert("app");   
// trie.search("app");     // returns true

// 数据结构之Trie树
// http://dongxicheng.org/structure/trietree/

class TrieNode {
public:
    // 每个结点都是一个26叉树
    TrieNode* child[26];
    bool isWord;
    
    // new新的结点时将child全都置为NULL
    TrieNode() : isWord(false) {
        for (auto &p : child) {
            p = NULL;
        }
    }
};

class Trie {
private:
    TrieNode* root;
    
public:
    /** Initialize your data structure here. */
    Trie() {
        root = new TrieNode();  
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* p = root;
        
        for (auto &s : word) {
            // 获取当前字母序
            int i = s - 'a';
            if (!p->child[i]) {
                // TrieNode和NULL区分是否存在结点
                p->child[i] = new TrieNode();
            }
            p = p->child[i];
        }
        
        p->isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* p = root;
        
        for (auto &s : word) {
            // 获取当前字母序
            int i = s - 'a';
            if (!p->child[i]) {
                return false;
            }
            p = p->child[i];
        }
        
        // 如果只是途径不能算search, 需要这个词是单词
        return p->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* p = root;
        
        for (auto &s : prefix) {
            // 获取当前字母序
            int i = s - 'a';
            if (!p->child[i]) {
                return false;
            }
            p = p->child[i];
        }
        
        // startsWith只要有就能算
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
