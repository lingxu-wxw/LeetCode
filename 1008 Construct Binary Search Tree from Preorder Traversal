// Input: preorder = [8,5,1,7,10,12]
// Output: [8,5,10,1,7,null,12]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    TreeNode* helper(vector<int>& preorder, int left, int right) {
        if (left > right) return NULL;
        
        // 前序遍历，直接可以确定当前的根结点
        TreeNode* node = new TreeNode(preorder[left]);
        int val = preorder[left];
        
        if (left == right) {
            return node;
        }
        
        // 分割左子树和右子树
        int i;
        for (i = left + 1; i <= right; i++) {
            if (preorder[i] > val) {
                break;
            }
        }
        
        // 递归遍历
        node->left = helper(preorder, left+1, i-1);
        node->right = helper(preorder, i, right);
        
        return node;
    }
    
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int size = preorder.size();
        
        return helper(preorder, 0, size-1);
    }
};
