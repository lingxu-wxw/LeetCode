// Input: nums = [1,3], n = 6
// Output: 1
// Explanation:
// Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.
// Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].
// Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].
// So we only need 1 patch.

class Solution {
public:
    
    // 补全n个数字，使得nums中能组成 [1,n]的所有数字
    
    int minPatches(vector<int>& nums, int n) {
        // 表示第一个还不能求和表示的数，[0, miss)是当前的cover范围
        long miss = 1;
        
        int i = 0;
        int res = 0;
        
        while (miss <= n) {
            // 如果nums[i] <= miss, 则这个数已经在cover范围了，我们用它来扩大miss边界
            if (i < nums.size() && nums[i] <= miss) {
                miss += nums[i];
                i++;
            } 
            // 如果nums[i] > miss，则[miss, nums[i])中间的数字暂时都是表示不了的
            // 我们增加一个值为miss的数，此时的表示范围变为[0, 2*miss)
            else {
                miss += miss;
                res++;
            }
        }
        
        return res;
    }
};

// 1 x 3 4 x x

// 1 x x x 5 6 x x x 10 11 x x x x 16 x x x x
