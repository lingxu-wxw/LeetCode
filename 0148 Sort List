/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    // O(n log n)的只有归并排序，快速排序和堆排序

    // Input: 4->2->1->3
    // Output: 1->2->3->4
    
    public ListNode mergeList(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;
        if (l1.val <= l2.val) {
            l1.next = mergeList(l1.next, l2);
            return l1;
        } else {
            l2.next = mergeList(l1, l2.next);
            return l2;
        }
    }
    
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) return head;
        // 快慢指针切分链表
        ListNode slow = head, fast = head, pre = head;
        while (fast != null && fast.next != null) {
            pre = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        // 切分链表
        pre.next = null;
        // 递归
        return mergeList(sortList(head), sortList(slow)); 
    }

}
