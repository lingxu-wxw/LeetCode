// Input: s = "dcab", pairs = [[0,3],[1,2]]
// Output: "bacd"
// Explaination: 
// Swap s[0] and s[3], s = "bcad"
// Swap s[1] and s[2], s = "bacd"

class DSU {
public:
    vector<int> groups;
    int componentCnt;
    
    DSU(int size) {
        groups.resize(size);
        for (int i = 0; i < size; i++) {
            groups[i] = i;
        }
        
        componentCnt = size;
    }
    
    // 找到n所在的组，并将涉及到的元素都标记为同组
    int Find(int n) {
        if (groups[n] == n) {
            return n;
        }
        groups[n] = Find(groups[n]);
        return groups[n];
    }
    
    // 将u和v划归为同一个组，u和v同组表明已经相连通
    void Union(int u, int v) {
        int groupu = Find(u);
        int groupv = Find(v);
        
        if (groupu == groupv) return;
        
        groups[groupu] = groupv;
        componentCnt--;
    }
};

class Solution {
public:
    string smallestStringWithSwaps(string s, vector<vector<int>>& pairs) {
        int size = s.length();
        
        DSU* dsu = new DSU(size);    
        for (auto pair : pairs) {
            dsu->Union(pair[0], pair[1]);
        }
        
        unordered_map<int, vector<int>> map;
        for (int i = 0; i < size; i++) {
            int parent = dsu->Find(i);
            map[parent].push_back(i);
        }
        
        string res = s;
        
        for (auto iter : map) {
            sort(iter.second.begin(), iter.second.end());
            
            string str = "";
            for (int idx : iter.second) {
                str += s[idx];
            }
            sort(str.begin(), str.end());
            
            int i = 0;
            for (int idx : iter.second) {
                res[idx] = str[i];
                i++;
            }
        }
        
        return res;
    }
};
