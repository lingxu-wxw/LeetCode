// Input: s = "bbbab"
// Output: 4
// Explanation: One possible longest palindromic subsequence is "bbbb".

class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int size = s.size();
        
        int maxlen = 1;
        
        // dp[i][j]表示字符串s[i]~s[j]中的最长回文子序列的长度
        vector<vector<int>> dp(size, vector<int>(size, 0));
        
        for (int i = 0; i < size; i++) {
            dp[i][i] = 1;
        }
        
        // 根据子串长度遍历找到可以成为回文子序列的小结构
        // len=size时就是字符串全长
        for (int len = 2; len <= size; len++) {
            for (int i = 0; i+len-1 < size; i++) {
                int j = i+len-1;
                
                if (s[i] == s[j]) {
                    dp[i][j] = dp[i+1][j-1] + 2;
                } else {
                    dp[i][j] = max(dp[i][j-1], dp[i+1][j]);
                }
                
                maxlen = max(maxlen, dp[i][j]);
            }
        }
        
        return maxlen;
    }
};
