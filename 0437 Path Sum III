// Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
// Output: 3
// Explanation: The paths that sum to 8 are shown.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void pathSumDFS(TreeNode* node, int targetSum, int curSum, vector<TreeNode*>& path, int& cnt) {
        if (node == NULL) {
            return;
        }

        // 从root到node的路径和
        curSum += node->val;
        if (curSum == targetSum) {
            cnt++;
        }
        
        // 要连续，从上往下删，看看还有没有别的可行结果
        // 但不能全删光，那就什么都没选，当targetSum=0时会出错
        path.push_back(node);
        int sum = curSum;
        
        for (int i = 0; i < path.size()-1; i++) {
            sum -= path[i]->val;
            if (sum == targetSum) {
                cnt++;
            }
        }
        
        // 递归遍历
        pathSumDFS(node->left, targetSum, curSum, path, cnt);
        pathSumDFS(node->right, targetSum, curSum, path, cnt);
        
        path.pop_back();
    }
    
    
    int pathSum(TreeNode* root, int targetSum) {
        vector<TreeNode*> path = {};
        int cnt = 0;
        
        pathSumDFS(root, targetSum, 0, path, cnt);
    
        return cnt;
    }
};
