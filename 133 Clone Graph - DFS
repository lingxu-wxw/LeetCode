/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;

    public Node() {}

    public Node(int _val,List<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/
class Solution {
    
    public void cloneGraphDFS(HashMap<Node, Node> map, Node node) {
        if (node == null) return;
        
        for (Node neigh : node.neighbors) {
            // 如果是新节点
            if (!map.containsKey(neigh)) {
                Node newneigh = new Node(neigh.val, new ArrayList<Node>());
                map.put(neigh, newneigh);
                cloneGraphDFS(map, neigh);
            }
            // map.get(node)返回的是拷贝的结点
            // 不这样是不行的，因为一开始的时候没有拓扑
            map.get(node).neighbors.add(map.get(neigh));
        }
    }
    
    public Node cloneGraph(Node node) {
        // 深度优先搜索 DFS
        if (node == null) return null;
        
        // 初始化新结点，不加邻接节点也没关系
        Node cloneNode = new Node(node.val, new ArrayList<Node>());
        // HashMap, key是拷贝前的Node, value是拷贝后的Node
        HashMap<Node, Node> map = new HashMap<Node, Node>();
        map.put(node, cloneNode);
        
        cloneGraphDFS(map, node);
        
        return cloneNode;
    }
}
