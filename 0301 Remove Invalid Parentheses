// Input: "()())()"
// Output: ["()()()", "(())()"]
// Example 2:

// Input: ")("
// Output: [""]

class Solution {
public:
    
    // 判断字符串中的括号是否是合法的
    bool isValidParentheses(string s) {
        // 左括号右括号数量
        int reml = 0;
        
        for (char c : s) {
            if (c == '(') {
                reml++;
            }
            if (c == ')') {
                if (reml <= 0) return false;
                reml--;
            }
        }
        
        return reml == 0;
    }
    
    // 递归调用函数
    void helper(string s, int start, int reml, int remr, vector<string>& res) {
        // 递归返回条件: 已经处理掉所有多余的左右括号
        if (reml == 0 && remr == 0) {
            if (isValidParentheses(s)) {
                res.push_back(s);
            }
            return;
        }
        
        int len = s.length();
        
        for (int i = start; i < len; i++) {
            // 连续相同字符，删除哪一个结果是相同的
            if (i != start && s[i] == s[i-1]) {
                continue;
            }
            
            // 删除左右括号: reml和remr至多只有一个会是非0数
            if (reml > 0 && s[i] == '(') {
                helper(s.substr(0,i) + s.substr(i+1), i, reml-1, remr, res);
            }
            if (remr > 0 && s[i] == ')') {
                helper(s.substr(0,i) + s.substr(i+1), i, reml, remr-1, res);
            }
        }
    }
    
    // 主函数
    vector<string> removeInvalidParentheses(string s) {
        int reml = 0, remr = 0;
        
        int len = s.length();
        vector<string> res;
        
        // 遍历一遍计算多余的左右括号数量
        for (int i = 0; i < len; i++) {
            reml += (s[i] == '(');
            
            if (reml == 0) {
                remr += (s[i] == ')');
            } else {
                reml -= (s[i] == ')');
            }
        }
        
        helper(s, 0, reml, remr, res);
        
        return res;
    }

};
