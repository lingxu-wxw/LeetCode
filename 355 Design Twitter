class Twitter {
private:
    int time;
    unordered_map<int, unordered_set<int>> friends; // set去重
    unordered_map<int, map<int, int>> tweets; // pair<time, tweetId>
    
public:
    /** Initialize your data structure here. */
    Twitter() {
        time = 0;
    }
    
    /** Compose a new tweet. */
    void postTweet(int userId, int tweetId) {
        follow(userId, userId);
        tweets[userId].insert({time, tweetId}); // tweets最多存10条
        time++;
    }
    
    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
    vector<int> getNewsFeed(int userId) {
        vector<int> res;
        map<int, int> recents;
        
        for (auto id : friends[userId]) {
            for (auto tweet : tweets[id]) {
                // 按照先后顺序排序，map的内部实现默认使用A类型变量的升序来排序map的值
                recents.insert({tweet.first, tweet.second});
                if (recents.size() > 10) {
                    recents.erase(recents.begin());
                }
            }
        }
        
        // 最新的消息放在最前面，倒序输出
        for (auto tweet : recents) {
            res.insert(res.begin(), tweet.second);
        }
        return res;
    }
    
    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
    void follow(int followerId, int followeeId) {
        // 单向关注
        friends[followerId].insert(followeeId);
    }
    
    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
    void unfollow(int followerId, int followeeId) {
        if (followerId != followeeId) {
            friends[followerId].erase(followeeId);
        }
    }
};

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter* obj = new Twitter();
 * obj->postTweet(userId,tweetId);
 * vector<int> param_2 = obj->getNewsFeed(userId);
 * obj->follow(followerId,followeeId);
 * obj->unfollow(followerId,followeeId);
 */
