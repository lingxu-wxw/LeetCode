// Input:
//    1
//  /   \
// 2     3
//  \
//   5

// Output: ["1->2->5", "1->3"]
// Explanation: All root-to-leaf paths are: 1->2->5, 1->3

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void binaryTreePathsDFS(TreeNode* root, string curpath, vector<string>& paths) { 
        // 到达叶子结点
        if (root->left == NULL && root->right == NULL) {
            paths.push_back(curpath + to_string(root->val));
            return;
        }
        
        if (root->left != NULL) {
            binaryTreePathsDFS(root->left, curpath + to_string(root->val) + "->", paths);
        }
        if (root->right != NULL) {
            binaryTreePathsDFS(root->right, curpath + to_string(root->val) + "->", paths);
        }
    }
    
    vector<string> binaryTreePaths(TreeNode* root) {
        if (!root) return {};
        
        vector<string> paths;
        binaryTreePathsDFS(root, "", paths);
        
        return paths;
    }
};
