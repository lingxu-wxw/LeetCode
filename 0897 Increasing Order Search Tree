// Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
// Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    // 返回整形完成的根节点，next是跟在着一串后面的节点
    TreeNode* inorder(TreeNode* root, TreeNode* next) {
        if (!root) return next;
        
        // 右孩子整形完成
        root->right = inorder(root->right, next);
        // 左孩子整形完成，出现新根节点
        TreeNode* newroot = inorder(root->left, root);
        
        root->left = NULL;
        
        return newroot;
    }
    
    TreeNode* increasingBST(TreeNode* root) {
        return inorder(root, NULL);
    }
};
