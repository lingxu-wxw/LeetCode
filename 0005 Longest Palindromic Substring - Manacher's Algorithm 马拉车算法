// Input: s = "babad"
// Output: "bab"
// Note: "aba" is also a valid answer.

class Solution {
public:
    string longestPalindrome(string s) {
        // Insert '#'
        string t = "$#";
        for (int i = 0; i < s.size(); ++i) {
            t += s[i];
            t += "#";
        }
        
        // Process t
        vector<int> p(t.size(), 0);
        
        // id 为能延伸到最右端的位置的那个回文子串的中心点位置，mx 是回文串能延伸到的最右端的位置
        // mx 位置的字符不属于回文串，所以才能用 mx-i 来更新 p[i] 的长度而不用加1
        int mx = 0, id = 0, resLen = 0, resCenter = 0;
        
        for (int i = 1; i < t.size(); ++i) {
            // mx - i和p[j]用于判断，以S[j]为中心的回文子串 是否包含在 以S[id]为中心的回文子串中
            p[i] = mx > i ? min(p[2 * id - i], mx - i) : 1;
            
            while (t[i + p[i]] == t[i - p[i]]) {
                ++p[i];
            }
            if (mx < i + p[i]) {
                mx = i + p[i];
                id = i;
            }
            
            if (resLen < p[i]) {
                resLen = p[i];
                resCenter = i;
            }
        }
        
        // 最长子串的长度是半径减1，起始位置是中间位置减去半径再除以2
        return s.substr((resCenter - resLen) / 2, resLen - 1);
    }
};
