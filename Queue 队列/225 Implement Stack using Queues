class MyStack {
private:    
    
    // 存相反的顺序, 即queue.front()=stack.top()
    queue<int> masterQueue;
    queue<int> servantQueue;
    
public:
    /** Initialize your data structure here. */
    MyStack() {
        
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        if (!empty()) {
            while (!masterQueue.empty()) {
                servantQueue.push(masterQueue.front());
                masterQueue.pop();
            }
            masterQueue.push(x);
            while (!servantQueue.empty()) {
                masterQueue.push(servantQueue.front());
                servantQueue.pop();
            }
        } else {
            // 第一个元素
            masterQueue.push(x);
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int val = masterQueue.front();
        masterQueue.pop();
        return val;
    }
    
    /** Get the top element. */
    int top() {
        return masterQueue.front();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return masterQueue.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */
