// Input: prices = [1,3,2,8,4,9], fee = 2
// Output: 8
// Explanation: The maximum profit can be achieved by:
// - Buying at prices[0] = 1
// - Selling at prices[3] = 8
// - Buying at prices[4] = 4
// - Selling at prices[5] = 9
// The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.

class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int size = prices.size();
        
        // buy[i]表示在第i天及之前最后一个操作是买，此时的最大收益 / 等价于持仓
        // sell[i]表示在第i天及之前最后一个操作是卖，此时的最大收益 / 等价于出售
        vector<int> buy(size, 0), sell(size, 0);
        
        buy[0] = -prices[0];
        
        for (int i = 1; i < size; i++) {
            // 第i天没买，第i天买了
            buy[i] = max(buy[i-1], sell[i-1]-prices[i]);
            
            // 第i天没卖，第i天卖了
            sell[i] = max(sell[i-1], buy[i-1]+prices[i]-fee);
        }
        
        return sell[size-1];
    }
};
