// Input: grid = [[1,0],[0,1]]
// Output: 3
// Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.

class Solution {
public:
    
    vector<vector<int>> directions = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };
    
    vector<int> neighbors(vector<vector<int>>& grid, int i, int j) {
        int size = grid.size();
        
        vector<int> res;
        for (auto dir : directions) {
            int newi = i + dir[0];
            int newj = j + dir[1];
            if (newi >= 0 && newi < size && newj >= 0 && newj < size) {
                res.push_back(newi * size + newj);
            }
        }
        
        return res;
    }

    int dfs(vector<vector<int>>& grid, int i, int j, int index) {
        int size = grid.size();
        
        int cnt = 1;
        grid[i][j] = index;
        
        for (auto node : neighbors(grid, i, j)) {
            int neighi = node / size;
            int neighj = node % size;
            if (grid[neighi][neighj] == 1) {
                grid[neighi][neighj] = index;
                cnt += dfs(grid, neighi, neighj, index);
            }
        }
        
        return cnt;
    }
    
    int largestIsland(vector<vector<int>>& grid) {
        int size = grid.size();
        
        int index = 2;
        vector<int> indexarea(size * size + 2, 0);

        int zeroflipmax = 0;
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (grid[i][j] == 1) {
                    indexarea[index] = dfs(grid, i, j, index);
                    zeroflipmax = max(zeroflipmax, indexarea[index]);
                    index++;
                }
            }
        }

        int oneflipmax = zeroflipmax;
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (grid[i][j] == 0) {
                    set<int> seenindex;
                    for (auto node : neighbors(grid, i, j)) {
                        int neighi = node / size;
                        int neighj = node % size;
                        if (grid[neighi][neighj] > 1) {
                            seenindex.insert(grid[neighi][neighj]);
                        }
                    }

                    int cnt = 1;
                    for (auto idx : seenindex) {
                        cnt += indexarea[idx];
                    }
                    oneflipmax = max(oneflipmax, cnt);
                }
            }
        }
        
        return oneflipmax;
    }
};
