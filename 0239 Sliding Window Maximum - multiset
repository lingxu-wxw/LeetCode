// Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
// Output: [3,3,5,5,6,7]
// Explanation: 
// Window position                Max
// ---------------               -----
// [1  3  -1] -3  5  3  6  7       3
//  1 [3  -1  -3] 5  3  6  7       3
//  1  3 [-1  -3  5] 3  6  7       5
//  1  3  -1 [-3  5  3] 6  7       5
//  1  3  -1  -3 [5  3  6] 7       6
//  1  3  -1  -3  5 [3  6  7]      7

class Solution {
public:
    
    // c.rbegin()，返回一个逆向迭代器，指向逆向迭代的第一个元素
    // c.find(elem)，返回元素值为elem的第一个元素，如果没有返回end()
    // c.find(elem)，返回元素值为elem的第一个元素，如果没有返回end()
    // c.erase(elem)，删除与elem相等的所有元素，返回被移除的元素个数
    // c.erase(pos)，移除迭代器pos所指位置元素，无返回值
    
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        // 利用multiset来自动排序局部最大值，基于红黑树实现，时间复杂度O(logn)
        // 也可以使用优先级队列priority_queue<pair<int, int>> q; {nums[i],i}
        
        int size = nums.size();
        multiset<int> mlset;
        
        vector<int> res;
        
        for (int i = 0; i < size; i++) {
            // 删除掉出slide window的数
            if (i >= k) {
                mlset.erase(mlset.find(nums[i-k]));
            }
            
            mlset.insert(nums[i]);
            
            // 返回multiset最右端的数，即当前slide window的最大值
            if (i >= k-1) {
                res.push_back(*mlset.rbegin());
            }
        }
        
        return res;
    }
};
