// Input: nums = [1,2,1,3,2,5]
// Output: [3,5]
// Explanation:  [5, 3] is also a valid answer.

class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        // exactly two elements，相当于single two number
        
        int size = nums.size();
        
        int diff;
        vector<int> res(2, 0);
        
        // 性质：A ^ A = 0
        // 获得两个exactly single数的异或
        // for (int i = 0; i < size; i++) {
        //    diff ^= nums[i];
        // }
        diff = accumulate(nums.begin(), nums.end(), 0, bit_xor<int>());
        
        // 分组条件，通过diff把两个exactly single分到两组
        diff &= -diff;
        
        // 分成两组
        for (int i = 0; i < size; i++) {
            if (nums[i] & diff) {
                res[0] ^= nums[i];
            } else {
                res[1] ^= nums[i];
            }
        }
        
        return res;
        
        // 1 :   1
        // 2 :  10
        // 3 :  11
        // 5 : 101
        // diff 3^5 : 110
        // -diff : 111010 负数=补码+1
        // diff & -diff : 10
        
        // diff &= -diff
        // 得到最低位的不同的位
        
        // 10 -> 10 & 10 = 10
        // 01 -> 01 & 11 = 01
        // 00 -> 00 & 00 = 00 (不可能)
        // 11 -> 11 & 01 = 01
        
        // 100 -> 100 & 100 = 100
        // 101 -> 101 & 011 = 001
        // 110 -> 110 & 010 = 010
        // 111 -> 111 & 001 = 001
    }
};
