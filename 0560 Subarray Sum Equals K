// Input: nums = [1,1,1], k = 2
// Output: 2

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int size = nums.size();
        
        // 遍历到i时，[0,j] j<=i 中 sum - cnt 的对应关系
        // 如果遍历到i时累加和为sum，存在[0,j]使得 map[sum-k]存在，则nums[j:i] = k，找到一个结果
        unordered_map<int, int> map;
        map[0] = 1;
        
        int sum = 0;
        int res = 0;
        
        for (int i = 0; i < size; i++) {
            sum += nums[i];
            
            if (map.count(sum-k)) {
                res += map[sum-k];
            }
            
            map[sum]++;
        }
        
        return res;
    }
};
