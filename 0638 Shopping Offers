// Input: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]
// Output: 14
// Explanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively. 
// In special offer 1, you can pay $5 for 3A and 0B
// In special offer 2, you can pay $10 for 1A and 2B. 
// You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.

class Solution {
public:
    
    // 不用任何优惠，直接买的开销
    int shoppingWithoutOffers(vector<int>& price, vector<int>& needs) {
        int cost = 0;
        for (int i = 0; i < n; i++) {
            cost += price[i] * needs[i];
        }
        
        return cost;
    }
    
    // 判断能否使用当前优惠
    bool canUseSpecialOffer(vector<int>& offer, vector<int>& needs) {
        for (int i = 0; i < n; i++) {
            if (offer[i] > needs[i]) {
                return false;
            }
        }
        
        return true;
    }
    
    // 遍历使用所有优惠
    void shoppingOffersDFS(vector<int>& price, vector<vector<int>>& special, vector<int>& needs, int idx, int curcost) {
        // 剪枝，当前开销大于minprice
        if (curcost > mincost) {
            return;
        }
        
        // 终止，所有优惠都用过了，剩下的直接买
        if (idx == special.size()) {
            curcost += shoppingWithoutOffers(price, needs);
            if (curcost < mincost) {
                mincost = curcost;
            }
            return;
        }
        
        // 使用第idx个优惠
        vector<int> offer = special[idx];
        
        if (canUseSpecialOffer(offer, needs)) {
            vector<int> newneeds;
            for (int i = 0; i < n; i++) {
                newneeds.push_back(needs[i] - offer[i]);
            }
            
            shoppingOffersDFS(price, special, newneeds, idx, curcost + offer[n]);
        }
        
        // 不使用第idx个优惠
        shoppingOffersDFS(price, special, needs, idx + 1, curcost);
    }
    
    // 主函数
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        n = price.size();
        mincost = shoppingWithoutOffers(price, needs);
        
        shoppingOffersDFS(price, special, needs, 0, 0);
        return mincost;
    }

private:
    int n;
    int mincost;
};
