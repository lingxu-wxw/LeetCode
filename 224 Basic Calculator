// Input: "(1+(4+5+2)-3)+(6+8)"
// Output: 23

class Solution {
public:
    int calculate(string s) {
        int slen = s.size();
        
        int res = 0, sign = 1;
        stack<int> st; // 遇到括号时利用栈做存储
        
        for (int i = 0; i < slen; i++) {
            char c = s[i];
            
            // 处理数字
            if (c >= '0' && c <= '9') {
                int num = 0;
                while (i < slen && s[i] >= '0' && s[i] <= '9') { // 获取整个数
                    num = num*10 + (s[i] - '0');
                    i++;
                }
            
                res += sign * num; // 计算结果
                i--;
            }
            
            // 处理加减号
            else if (c == '+') {
                sign = 1;
            } 
            else if (c == '-') {
                sign = -1;
            } 
            
            // 处理括号
            else if (c == '(') {
                // 将当前的res和sign压入栈存储，类似于递归
                st.push(res);
                st.push(sign);
                res = 0;
                sign = 1;
            }
            else if (c == ')') {
                res *= st.top(); // 出栈sign
                st.pop();
                res += st.top(); // 出栈res
                st.pop();
            }
            
            // 处理空格
            // 不做任何处理
        }
        
        return res;
    }
};
