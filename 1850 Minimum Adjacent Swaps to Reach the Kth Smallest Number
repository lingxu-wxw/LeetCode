// Input: num = "5489355142", k = 4
// Output: 2
// Explanation: The 4th smallest wonderful number is "5489355421". To get this number:
// - Swap index 7 with index 8: "5489355142" -> "5489355412"
// - Swap index 8 with index 9: "5489355412" -> "5489355421"

class Solution {
public:
    
    // 复用 0031 Next Permutation
    
    void nextPermutation(string& num) {
        // 思路: 倒序遍历, 找到第一个逆序的, 再倒序遍历, 找到第一个比它大的, 然后交换后转置
        // 例子: 1-2(*)-7-4-3(*)-1 => 1-3-1-2-4-7
        
        int size = num.length();
        
        int i = 0, j = 0; 
        for (i = size - 2; i >= 0; i--){
            // 逆序
            if (num[i+1] > num[i]){
                for (j = size - 1; j > i; j--){
                    // 找到第一个更大的, 一定会有
                    if (num[j] > num[i]) break;
                }
                // 交换后顺序关系不变
                swap(num[i], num[j]);
                // 翻转
                reverse(num.begin() + i + 1, num.end());
                return;
            }
        }
        
        // 当前是全排列最后一项
        reverse(num.begin(), num.end());
    }
    
    int getMinSwaps(string num, int k) {
        int size = num.length();
        
        string kthPerm = num;
        int res = 0;
        
        for (int i = 0; i < k; i++) {
            nextPermutation(kthPerm);
        }
        
        for (int i = 0; i < size; i++) {
            int j = i;
            while (num[i] != kthPerm[j]) {
                j++;
            }
            
            while (j > i) {
                swap(kthPerm[j], kthPerm[j-1]);
                j--;
                res++;
            }
        }
        
        return res;
    }
};
