// Input: chars = ["a","a","b","b","c","c","c"]
// Output: Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]
// Explanation: The groups are "aa", "bb", and "ccc". This compresses to "a2b2c3".

// Input: chars = ["a"]
// Output: Return 1, and the first character of the input array should be: ["a"]
// Explanation: The only group is "a", which remains uncompressed since it's a single character.

// Input: chars = ["a","b","b","b","b","b","b","b","b","b","b","b","b"]
// Output: Return 4, and the first 4 characters of the input array should be: ["a","b","1","2"].
// Explanation: The groups are "a" and "bbbbbbbbbbbb". This compresses to "ab12".

class Solution {
public:
    int compress(vector<char>& chars) {
        int size = chars.size();
        
        // 标记当前压缩的idx
        int cur = 0;
        
        // 类似while的写法
        for (int i = 0, idx = 0; i < size; i = idx) {
            // 向后遍历相同的字符
            // idx < size 防止溢出
            while (idx < size && chars[idx] == chars[i]) {
                idx++;
            }
            
            // 字母填充
            chars[cur] = chars[i];
            cur++;
            
            // 如果长度为1，不填充数字
            if (idx - i == 1) {
                continue;
            }
            
            // 填充数字
            // 从低位到高位用 % 和 /，从高位到低位直接 to_string遍历
            for (char c : to_string(idx-i)) {
                chars[cur] = c;
                cur++;
            }
        }
        
        chars.resize(cur);
        return cur;  
    }
};
