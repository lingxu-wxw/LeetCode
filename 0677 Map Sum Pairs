// Input
// ["MapSum", "insert", "sum", "insert", "sum"]
// [[], ["apple", 3], ["ap"], ["app", 2], ["ap"]]
// Output
// [null, null, 3, null, 5]

// Explanation
// MapSum mapSum = new MapSum();
// mapSum.insert("apple", 3);  
// mapSum.sum("ap");           // return 3 (apple = 3)
// mapSum.insert("app", 2);    
// mapSum.sum("ap");           // return 5 (apple + app = 3 + 2 = 5)

class TrieNode {
public:
    TrieNode* child[26];
    int value;
    
    TrieNode() : value(0) {
        for (auto &p : child) {
            p = NULL;
        }
    }
};

class MapSum {
public:
    MapSum() {
        root = new TrieNode();
    }
    
    void insert(string key, int val) {
        TrieNode* p = root;
        
        for (auto &s : key) {
            int i = s - 'a';
            if (!p->child[i]) {
                p->child[i] = new TrieNode();
            }
            p = p->child[i];
        }
        
        p->value = val;
    }
    
    int sum(string prefix) {
        TrieNode* p = root;
        
        for (auto &s : prefix) {
            int i = s - 'a';
            if (!p->child[i]) {
                return 0;
            }
            p = p->child[i];
        }
        
        return sumChild(p);
    }
    
    int sumChild(TrieNode* p) {
        if (!p) return 0;
        
        int sum = 0;
        for (int i = 0; i < 26; i++) {
            if (!p->child[i]) continue;
            sum += sumChild(p->child[i]);
        }
        
        return sum + p->value;
    }

private:
    TrieNode* root;
};

/**
 * Your MapSum object will be instantiated and called as such:
 * MapSum* obj = new MapSum();
 * obj->insert(key,val);
 * int param_2 = obj->sum(prefix);
 */
