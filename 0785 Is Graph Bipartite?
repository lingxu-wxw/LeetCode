// Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
// Output: false
// Explanation: There is no way to partition the nodes into two independent sets such // that every edge connects a node in one and a node in the other.

class Solution {
public:
    
    bool bfshelper(vector<vector<int>>& graph, vector<int>& color, int i) {
        queue<int> queue;
        queue.push(i);
        color[i] = 0;
        
        while (!queue.empty()) {
            int node = queue.front();
            queue.pop();
            
            for (int neighnode : graph[node]) {
                if (color[neighnode] == -1) {
                    color[neighnode] = 1 - color[node];
                    queue.push(neighnode);
                } 
                else if (color[neighnode] == color[node]) {
                    return false;
                }
            }
        }
        
        return true;
    }
    
    bool isBipartite(vector<vector<int>>& graph) {
        int size = graph.size();
        
        vector<int> color(size, -1);
        
        for (int i = 0; i < size; i++) {
            if (color[i] == -1) {
                if (!bfshelper(graph, color, i)) {
                    return false;
                }
            }
        }
        
        return true;
    }
};
