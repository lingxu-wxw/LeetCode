/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    // Input: 3
    // Output:
    // [
    //   [1,null,3,2],
    //   [3,2,null,1],
    //   [3,1,null,null,2],
    //   [2,1,3],
    //   [1,null,2,null,3]
    // ]
    // Explanation:
    // The above output corresponds to the 5 unique BST's shown below:
    // 
    //    1         3     3      2      1
    //     \       /     /      / \      \
    //      3     2     1      1   3      2
    //     /     /       \                 \
    //    2     1         2                 3
    
    vector<TreeNode*> generateTreesDFS(int start, int end) {
        
        vector<TreeNode*> res;
        
        if (start > end) {
            res.push_back(NULL);
            return res;
        }
        
        // i作为root结点
        for (int i = start; i <= end; i++) {
            vector<TreeNode*> leftchild = generateTreesDFS(start, i-1);
            vector<TreeNode*> rightchild = generateTreesDFS(i+1, end);
            
             for (auto left : leftchild) {
                for (auto right : rightchild) {
                    TreeNode* root = new TreeNode(i);
                    root->left = left;
                    root->right = right;
                    res.push_back(root);
                }
            }
        }
        
        return res;
    }
    
    vector<TreeNode*> generateTrees(int n) {
        if (n < 1) return {};
        else return generateTreesDFS(1, n);
    }
};
