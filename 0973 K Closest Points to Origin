// Input: points = [[1,3],[-2,2]], k = 1
// Output: [[-2,2]]

// Explanation:
// The distance between (1, 3) and the origin is sqrt(10).
// The distance between (-2, 2) and the origin is sqrt(8).
// Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
// We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].

class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        unordered_map<int, vector<vector<int>> > map;           // distance - point map
        priority_queue<int, vector<int>, greater<int> > pq;     // 小顶堆
        
        int distance;
        vector<vector<int>> res;
        
        for (auto point : points) {
            distance = point[0] * point[0] + point[1] * point[1];
            map[distance].push_back(point);
            pq.push(distance);
        }
        
        while (k > 0) {
            distance = pq.top();
            pq.pop();
            
            int size = map[distance].size();
            
            for (int i = 0; i < min(k, size); i++) {
                res.push_back(map[distance].back());
                map[distance].pop_back();
            }
            
            k -= min(k, size);
        }
        
        return res;
    }
};
