// Input: root1 = [2,1,4], root2 = [1,0,3]
// Output: [0,1,1,2,3,4]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        stack<TreeNode*> s1, s2;
        TreeNode* node1 = root1;
        TreeNode* node2 = root2;
        
        vector<int> res;
        
        while (node1 || node2 || !s1.empty() || !s2.empty()) {
            while (node1) {
                s1.push(node1);
                node1 = node1->left;
            }
            while (node2) {
                s2.push(node2);
                node2 = node2->left;
            }
            
            // s2空 或 s1s2均非空且s1.top()更小
            if (s2.empty() || (!s1.empty() && s1.top()->val <= s2.top()->val)) {
                node1 = s1.top();
                s1.pop();
                res.push_back(node1->val);
                node1 = node1->right;
            }
            else {
                node2 = s2.top();
                s2.pop();
                res.push_back(node2->val);
                node2 = node2->right;
            }
        }
        
        return res;
    }
};
