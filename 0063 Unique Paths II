class Solution {
public:
    
    // Input:
    // [
    //   [0,0,0],
    //   [0,1,0],
    //   [0,0,0]
    // ]
    // Output: 2
    // Explanation:
    // There is one obstacle in the middle of the 3x3 grid above.
    // There are two ways to reach the bottom-right corner:
    // 1. Right -> Right -> Down -> Down
    // 2. Down -> Down -> Right -> Right
    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        //大致思路: 动态规划
        
        if (obstacleGrid.empty() ||obstacleGrid[0].empty()) return 0;
        if (obstacleGrid[0][0] == 1) return 0;
        
        //初值全都设为0
        //int改成long, 居然有case会溢出...
        int m = obstacleGrid.size(), n = obstacleGrid[0].size();
        vector<vector<long> > dp(m, vector<long>(n, 0));
        
        //边缘线上如果无障碍应该都是1
        dp[0][0] = 1;
        for (int j = 1; j < n; j++) {
            if (obstacleGrid[0][j] == 1) break;
            dp[0][j] = 1;
        }
        for (int i = 1; i < m; i++) {
            if (obstacleGrid[i][0] == 1) break;
            dp[i][0] = 1;
        }
            
        //动态规划
        int flag = 0;
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                flag = (obstacleGrid[i][j] == 1);
                //转移方程
                dp[i][j] = flag ? 0 : (dp[i-1][j] + dp[i][j-1]);
            }
        }
        
        return dp[m-1][n-1];
    }
};
