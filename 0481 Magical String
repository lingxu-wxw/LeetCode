// The first few elements of s is s = "1221121221221121122……". 
// If we group the consecutive 1's and 2's in s, it will be "1 22 11 2 1 22 1 22 11 2 11 22 ......" 
// and the occurrences of 1's or 2's in each group are "1 2 2 1 1 2 1 2 2 1 2 2 ......". 
// You can see that the occurrence sequence is s itself.

// Input: n = 6
// Output: 3
// Explanation: The first 6 elements of magical string s is "122112" and it contains three 1's, so return 3.

class Solution {
public:
    int magicalString(int n) {
        if (n <= 3) return 1;
        
        queue<int> queue;
        queue.push(2);
        
        // n+1轮次的总数，n轮次的总数，
        // n轮次的1的个数，下一个新增的数
        int cnt = 3, lastcnt = 2;
        int cnt1 = 1;
        int next = 1;
        
        // queue的进度会比cnt1快一个轮次
        while (!queue.empty() && cnt <= n) {
            lastcnt = cnt;
            
            int size = queue.size();
            
            for (int i = 0; i < size; i++) {
                int num = queue.front(); queue.pop();
                if (num == 1) {
                    cnt1++;
                }
                
                while (num > 0) {
                    queue.push(next);
                    cnt++;
                    num--;
                }
                
                next = (next == 1) ? 2 : 1;
            }
        }
        
        // 收尾工作，最后一个不完整轮次中需要被计入的1
        for (int i = 0; i < n - lastcnt; i++) {
            int num = queue.front(); queue.pop();
                if (num == 1) {
                    cnt1++;
                }
        }
        
        return cnt1;
    }
};

// 1 2  2, 1 1, 2 1, 2 2 1, 2 2 1 1 2, 1 1 2 2 1 2 1 1, 2 1 2 2 1 1 2 1 1 2 1,  
// 1 2, 2, 1 1, 2 1, 2 2 1, 2 2 1 1 2, 1 1 2 2 1 2 1 1, 
