/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    // For example:
    // Given binary tree [3,9,20,null,null,15,7],
    //     3
    //    / \
    //   9  20
    //     /  \
    //    15   7
    // return its bottom-up level order traversal as:
    // [
    //   [15,7],
    //   [9,20],
    //   [3]
    // ]
    
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        // 层序遍历二叉树是典型的广度优先搜索BFS的应用
        if (!root) return {};
        vector<vector<int>> res;
        queue<TreeNode*> q{{root}};
        
        while (!q.empty()) {
            vector<int> onelevel;
            for (int i = q.size(); i > 0; i--) {
                TreeNode *t = q.front(); 
                q.pop();
                onelevel.push_back(t->val);
                if (t->left) q.push(t->left);
                if (t->right) q.push(t->right);
            }
            
            // 也可以在这里插入到前面
            // res.insert(res.begin(), onelevel);
            
            res.push_back(onelevel);
        }
        
        // shortcut 最后翻转一下
        reverse(res.begin(),res.end());
        
        return res;
    }
};
