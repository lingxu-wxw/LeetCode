// Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
// Output: 2

class Solution {
public:
    
    void findCircleNumDFS(vector<vector<int>>& isConnected, vector<bool>& visited, int i) {
        int size = isConnected.size();
        
        visited[i] = true;
        
        // 遍历城市i的邻接表
        for (int j = 0; j < size; j++) {
            if (i == j || visited[j] || isConnected[i][j] == 0) continue;
            
            findCircleNumDFS(isConnected, visited, j);
        }
    }
    
    int findCircleNum(vector<vector<int>>& isConnected) {
        int size = isConnected.size();
        
        vector<bool> visited(size, false);
        int province = 0;
        
        for (int i = 0; i < size; i++) {
            if (visited[i]) continue;
            
            province++;
            findCircleNumDFS(isConnected, visited, i);
        }
        
        return province;
    }
};
