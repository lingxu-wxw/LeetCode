// Input: words = ["time", "me", "bell"]
// Output: 10
// Explanation: A valid encoding would be s = "time#bell#" and indices = [0, 2, 5].
// words[0] = "time", the substring of s starting from indices[0] = 0 to the next '#' is underlined in "time#bell#"
// words[1] = "me", the substring of s starting from indices[1] = 2 to the next '#' is underlined in "time#bell#"
// words[2] = "bell", the substring of s starting from indices[2] = 5 to the next '#' is underlined in "time#bell#"

class Solution {
public:
    
    static bool cmp(string& s1, string& s2) {
        return s1.length() > s2.length();
    }
    
    int minimumLengthEncoding(vector<string>& words) {
        sort(words.begin(), words.end(), cmp);  // 单词长的放前面
        unordered_map<string, int> map;  // string - encode len
        
        for (string &word : words) {
            map[word] = word.length() + 1;
        }
        
        int minlen = 0;
        for (string &word : words) {
            minlen += map[word];
            
            for (int i = 0; i < word.length(); i++) {
                string str = word.substr(i);
                if (map.count(str)) {
                    map[str] = 0;
                }
            }
        }
      
        return minlen;
    }
};
