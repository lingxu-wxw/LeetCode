// Input: s = ")()())"
// Output: 4
// Explanation: The longest valid parentheses substring is "()()".

class Solution {
public:
    int longestValidParentheses(string s) {
        int size = s.size();
        if (size <= 1) return 0;
        
        int res = 0;
        
        // dp[i]是下标i时的valid parentheses长度，一定为偶数
        vector<int> dp(size, 0);
        
        for (int i = 1; i < size; i++) {
            // 只有以')'结尾时才做考虑
            if (s[i] == ')') {
                // 上一个可能匹配的位置
                if (i-1-dp[i-1] >= 0) {
                    if (s[i-1-dp[i-1]] == '(') {
                        // 匹配成功
                        dp[i] = dp[i-1] + 2;
                        // 因为改变了前面的布局，看看能不能接上
                        if (i-dp[i] >= 0) {
                            dp[i] += dp[i-dp[i]];
                        }
                    }
                }
            }
            
            // 不是找dp[n],而是找整个数组中最大的
            res = max(res, dp[i]);
        }
        
        return res;
    }
};
