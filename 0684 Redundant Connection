// Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
// Output: [1,4]

// 并查集
class DSU {
private:
    vector<int> groups;
public:
    // 初始化，每个元素各自为组
    DSU(int size) {
        groups.resize(size);
        for (int i = 0; i < size; i++) {
            groups[i] = i;
        }
    }
    
    // 找到n所在的组，并将涉及到的元素都标记为同组
    int Find(int n) {
        if (groups[n] == n) {
            return n;
        }
        groups[n] = Find(groups[n]);
        return groups[n];
    }
    
    // 将u和v划归为同一个组
    void Union(int u, int v) {
        int groupu = Find(u);
        int groupv = Find(v);
        
        if (groupu == groupv) return;
        
        groups[groupu] = groupv;
    }
};

class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int size = edges.size();
        
        DSU* dsu = new DSU(size + 1);
        
        vector<int> res = {};
        
        for (auto edge : edges) {
            int groupu = dsu->Find(edge[0]);
            int groupv = dsu->Find(edge[1]);
            
            if (groupu != groupv) {
                dsu->Union(edge[0], edge[1]);
            } else {
                res = edge;
            }
        }
        
        return res;
    }
};
