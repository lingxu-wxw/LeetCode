// Input: root = [1,2,3]
// Output: 1
// Explanation: 
// Tilt of node 2 : |0-0| = 0 (no children)
// Tilt of node 3 : |0-0| = 0 (no children)
// Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)
// Sum of every tilt : 0 + 0 + 1 = 1

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    // 后序遍历
    int postorder(TreeNode* root, int& tilt) {
        if (!root) return 0;
        
        int leftsum = postorder(root->left, tilt);
        int rightsum = postorder(root->right, tilt);
        
        tilt += abs(leftsum - rightsum);
        
        return leftsum + rightsum + root->val;
    }
    
    int findTilt(TreeNode* root) {
        int tilt = 0;
        postorder(root, tilt);
        
        return tilt;
    }
};
