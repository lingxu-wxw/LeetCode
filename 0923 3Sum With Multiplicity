// Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8
// Output: 20
// Explanation: 
// Enumerating by the values (arr[i], arr[j], arr[k]):
// (1, 2, 5) occurs 8 times;
// (1, 3, 4) occurs 8 times;
// (2, 2, 4) occurs 2 times;
// (2, 3, 3) occurs 2 times.

class Solution {
public:
    int threeSumMulti(vector<int>& arr, int target) {
        unordered_map<int, int> map;    // num - cnt
        int res = 0;
        int M = 1e9 + 7;
        
        for (auto num : arr) {
            map[num]++;
        }
        
        for (auto iter1 : map) {
            for (auto iter2 : map) {
                int i = iter1.first;
                int j = iter2.first;
                int k = target - i - j;
                
                if (!map.count(k)) continue;
                
                // 三个数相同
                if (i == j && j == k) {
                    res += ((long long)map[i] * (map[i] - 1) * (map[i] - 2) / 6 ) % M;
                } 
                // 两个数相同
                else if (i == j && j != k) {
                    res += ((long long)map[i] * (map[i] - 1) / 2 * map[k]) % M;
                }
                // 三个数各不相同，只考虑一种情况，不然会重复
                else if (i < j && j < k) {
                    res += ((long long)map[i] * map[j] * map[k]) % M;
                }
            }
        }
        
        return res % M;
    }
};
