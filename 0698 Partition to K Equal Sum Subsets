// Input: nums = [4,3,2,3,5,2,1], k = 4
// Output: true
// Explanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.

class Solution {
public:
    
    // 贪心算法
    bool helper(vector<int>& nums, vector<int>& subset, int k, int target, int idx) {
        if (idx == nums.size()) {
            return true;
        }
        
        int num = nums[idx];
        
        for (int i = 0; i < k; i++) {
            if (subset[i] + num > target) continue;
            
            subset[i] += num;
            if (helper(nums, subset, k, target, idx + 1)) {
                return true;
            }
            subset[i] -= num;
            
            // 如果此时subset[i]为0, 表示num这个数无论如何都找不到搭子，可以直接放弃了
            if (subset[i] == 0) {
                return false;
            }
        }
        
        return false;
    }
    
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int size = nums.size();
        
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (sum % k != 0) {
            return false;
        }
        
        sort(nums.begin(), nums.end(), greater<int>());
        if (nums[0] > sum / k) {
            return false;
        }
        
        vector<int> subset(k, 0);
        return helper(nums, subset, k, sum / k, 0);
    }
};
