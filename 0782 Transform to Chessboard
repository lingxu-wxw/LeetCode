// Input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]
// Output: 2
// Explanation: One potential sequence of moves is shown.
// The first move swaps the first and second column.
// The second move swaps the second and third row.

class Solution {
public:
    int movesToChessboard(vector<vector<int>>& board) {
        int n = board.size();
       
        // 为了保证后续可以以第一排第一列作为参考标准，需要先排除[1,0][1,1]这种情况
        // 因为如果有任意四角不是2个0，2个1，不管怎么换都换不掉的
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[0][0] ^ board[i][j] ^ board[i][0] ^ board[0][j] == 1) {
                    return -1;
                }
            }
        }
        
        // 可以以第一排和第一列作为参考标准了，后续只需要将第一排第一列swap好，其他格子会自然成型
        // 统计第一排以及第一列的和，排除[1,0][1,0]这种情况
        // 按照第一排第一列标准均为 1010... 去匹配，看看有多少不匹配的
        int rowSum = 0, colSum = 0;
        int rowMismatch = 0, colMismatch = 0;
        int rowSwap, colSwap;
        
        for (int i = 0; i < n; i++) {
            rowSum += board[0][i];
            colSum += board[i][0];
            
            if (board[0][i] == (i % 2)) {
                rowMismatch++;
            }
            if (board[i][0] == (i % 2)) {
                colMismatch++;
            }
        }
        
        // 如果rowSum，colSum不为n/2或(n+1)/2，排除
        // n=4，可能sum=2，n=5，可能sum=2，3
        if (n % 2 == 0) {
            if (rowSum != n/2) {
                return -1;
            }
            if (colSum != n/2) {
                return -1;
            }
        }
        else if (n % 2 == 1) {
            if (rowSum != n/2 && rowSum != (n+1)/2) {
                return -1;
            }
            if (colSum != n/2 && colSum != (n+1)/2) {
                return -1;
            }
        }
        
        // 计算需要swap的次数
        // 如果n是偶数，则0101和1010都是有可能换出来的
        // 如果n是奇数，需要根据sum来判断，n/2就是 0101，(n+1)/2就是1010
        if (n % 2 == 0) {
            rowSwap = min(rowMismatch, n - rowMismatch);
            colSwap = min(colMismatch, n - colMismatch);
        }
        else if (n % 2 == 1) {
            rowSwap = (rowSum == n/2) ? (n - rowMismatch) : rowMismatch;
            colSwap = (colSum == n/2) ? (n - colMismatch) : colMismatch;
        }
        
        // 交换的数量 = 需要交换的列数 / 2
        return (rowSwap + colSwap) / 2;
    }
};
