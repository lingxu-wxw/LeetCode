// Input: root = [1,3,2,5,3,null,9]
// Output: 4
// Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        // 层序遍历给节点编号
        if (!root) return 0;
        
        // 防止溢出要用unsigned long
        queue<pair<TreeNode*, unsigned long>> queue;
        queue.push({root, 0});
        int maxwidth = 1;
        
        while (!queue.empty()) {
            int size = queue.size();
            
            for (int i = 0; i < size; i++) {
                TreeNode* node = queue.front().first;
                unsigned long idx = queue.front().second;
                queue.pop();
                
                if (node->left) {
                    queue.push({node->left, idx * 2});
                }
                if (node->right) {
                    queue.push({node->right, idx * 2 + 1});
                }
            }
            
            // 计算一层的宽度
            if (!queue.empty()) {
                maxwidth = max(maxwidth, (int)(queue.back().second - queue.front().second + 1));
            }
        }
        
        return maxwidth;
    }
};
