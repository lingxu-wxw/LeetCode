// Input: root = [4,2,6,3,1,5], val = 1, depth = 2
// Output: [4,1,1,2,null,null,6,3,1,5]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        // 特殊情况特殊处理
        if (depth == 1) {
            TreeNode* node = new TreeNode(val);
            node->left = root;
            return node;
        }
        
        queue<TreeNode*> queue;
        queue.push(root);
        
        int nextdepth = 1;
        
        while (!queue.empty()) {
            int size = queue.size();
            
            nextdepth++;
            
            // 找到目标row，开始插入一整行
            if (nextdepth == depth) {
                for (int i = 0; i < size; i++) {
                    TreeNode* node = queue.front(); queue.pop();
                    
                    TreeNode* newleft = new TreeNode(val);
                    TreeNode* newright = new TreeNode(val);
                    
                    if (node->left) {
                        newleft->left = node->left;
                    }
                    if (node->right) {
                        newright->right = node->right;
                    }
                    
                    node->left = newleft;
                    node->right = newright;
                }
                
                return root;
            }
            // 没有找到目标row，继续层级遍历
            else {
                for (int i = 0; i < size; i++) {
                    TreeNode* node = queue.front(); queue.pop();
                    
                    if (node->left) {
                        queue.push(node->left);
                    }
                    if (node->right) {
                        queue.push(node->right);
                    }
                }
            }
        }
        
        return root;
    }
};
