// Input: [3,6,9,1]
// Output: 3
// Explanation: The sorted form of the array is [1,3,6,9], either
//              (3,6) or (6,9) has the maximum difference 3.

class Solution {
public:
    int maximumGap(vector<int>& nums) {
        int size = nums.size();
        if (size <= 1) return 0;
        
        // 线性的排序方法：桶排序 (不一定有完成排序)
        
        int maxnum = INT_MIN, minnum = INT_MAX; 
        int bktlen, bktcnt;
        
        int preidx = 0, res = 0;
        
        // 遍历找出数组中的最大值和最小值
        for (int i = 0; i < size; i++) {
            maxnum = max(nums[i], maxnum);
            minnum = min(nums[i], minnum);
        }
        
        // 设置桶bucket的个数和长度
        bktlen = (maxnum - minnum) / size + 1;
        bktcnt = (maxnum - minnum) / bktlen + 1;
        
        // 初始化最大桶和最小桶
        vector<int> bktmax(bktcnt, INT_MIN), bktmin(bktcnt, INT_MAX);
        
        // 遍历数组填充最大桶和最小桶
        for (int i = 0; i < size; i++) {
            // num所在桶的index
            int idx = (nums[i] - minnum) / bktlen;
            
            bktmax[idx] = max(nums[i], bktmax[idx]);
            bktmin[idx] = min(nums[i], bktmin[idx]);
        }
        
        // 寻找maximum gap
        for (int i = 1; i < bktcnt; i++) {
            if (bktmin[i] == INT_MAX || bktmax[i] == INT_MIN) {
                continue;
            }
            
            res = max(res, bktmin[i] - bktmax[preidx]);
            preidx = i;    
        }
        
        return res;
    }
};

// nums 3, 6, 9, 1
//  idx 0, 1, 2, 0 
// bktlen = 3, bktcnt = 3
// 1~3 4~6 7~9
// [1 3] [6 6] [9 9]

