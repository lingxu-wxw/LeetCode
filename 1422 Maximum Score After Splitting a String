// Input: s = "011101"
// Output: 5 
// Explanation: 
// All possible ways of splitting s into two non-empty substrings are:
// left = "0" and right = "11101", score = 1 + 4 = 5 
// left = "01" and right = "1101", score = 1 + 3 = 4 
// left = "011" and right = "101", score = 1 + 2 = 3 
// left = "0111" and right = "01", score = 1 + 1 = 2 
// left = "01110" and right = "1", score = 2 + 1 = 3

class Solution {
public:
    int maxScore(const string& s) {
        int len = s.length();

        int curScore = 0;
        if (s.front() == '0') curScore++;
        if (s.back() == '1') curScore++;
        for (int i = 1; i < len-1; i++) {
            if (s.at(i) == '1') {
                curScore++;
            }
        }

        int maxScore = curScore;
        for (int i = 1; i < len-1; i++) {
            if (s.at(i) == '0') {
                curScore++;
            } else {
                curScore--;
            }
            maxScore = max(maxScore, curScore);
        }

        return maxScore;
    }
};