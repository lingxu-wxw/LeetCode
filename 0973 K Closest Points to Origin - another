// Input: points = [[1,3],[-2,2]], k = 1
// Output: [[-2,2]]

// Explanation:
// The distance between (1, 3) and the origin is sqrt(10).
// The distance between (-2, 2) and the origin is sqrt(8).
// Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
// We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].

class Solution {
public:
    
    static bool compare(vector<int>& v1, vector<int>& v2) {
        return (v1[0] * v1[0] + v1[1] * v1[1]) < (v2[0] * v2[0] + v2[1] * v2[1]);
    }
    
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        sort(points.begin(), points.end(), compare);
        
        vector<vector<int>> res;
        
        for (int i = 0; i < k; i++) {
            res.push_back(points[i]);
        }
        
        return res;
    }
};
