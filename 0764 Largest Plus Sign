// Input: n = 5, mines = [[4,2]]
// Output: 2
// Explanation: In the above grid, the largest plus sign can only be of order 2. One of them is shown.

class Solution {
public:
    
    // 找出grid中能画出的最大的加号
    
    int orderOfLargestPlusSign(int n, vector<vector<int>>& mines) {
        
        // 类似cache的存储方法，将mines扁平化成数字
        unordered_set<int> set;
        
        for (auto mine : mines) {
            set.insert(mine[0] * n + mine[1]);
        }
      
        // dp[i][j]表示从mines[i][j]往上下左右四个方向最少的连续1的个数
        vector<vector<int>> dp(n, vector<int>(n, 0));
        
        int res = 0;
        int cnt = 0;
        
        for (int j = 0; j < n; j++) {
            // 计算往 上 方向的连续1
            // 第一轮遍历是没有初始值的，直接赋值
            cnt = 0;
            for (int i = 0; i < n; i++) {
                cnt = (set.count(i * n + j)) ? 0 : cnt + 1;
                dp[i][j] = cnt;
            }
            
            // 计算往 下 方向的连续1
            cnt = 0;
            for (int i = n-1; i >= 0; i--) {
                cnt = (set.count(i * n + j)) ? 0 : cnt + 1;
                dp[i][j] = min(dp[i][j], cnt);
            }
        }
        
        for (int i = 0; i < n; i++) {
            // 计算往 左 方向的连续1
            cnt = 0;
            for (int j = 0; j < n; j++) {
                cnt = (set.count(i * n + j)) ? 0 : cnt + 1;
                dp[i][j] = min(dp[i][j], cnt);
            }
            
            // 计算往 右 方向的连续1
            // 可以顺便在这次遍历中找到最终的res
            cnt = 0;
            for (int j = n-1; j >= 0; j--) {
                cnt = (set.count(i * n + j)) ? 0 : cnt + 1;
                dp[i][j] = min(dp[i][j], cnt);
                
                res = max(res, dp[i][j]);
            }
        }
        
        return res;

    }
};
