// Input: words = ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]
// Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]
// Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
// "dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
// "ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".

class Solution {
public:
    struct cmp {
        bool operator()(const string& s1, const string& s2) {
            return s1.length() < s2.length();
        }  
    };
    
    // 参考0140 Word Break II
    bool hasWordBreak(string word, set<string>& set) {
        int len = word.length();
        vector<bool> dp(len + 1, false);
        dp[0] = true;
        
        for (int j = 1; j <= len; j++) {
            for (int i = 0; i < j; i++) {
                string str = word.substr(i, j - i);
                if (dp[i] && set.count(str)) {
                    dp[j] = true;
                    break;
                }
            }
        }
        
        return dp[len];
    }
    
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        int size = words.size();
        sort(words.begin(), words.end(), cmp());
        
        vector<string> res;
        set<string> set;
        
        for (auto word : words) {
            if (word.length() == 0) continue;
            
            if (hasWordBreak(word, set)) {
                res.push_back(word);
            } else {
                set.insert(word);
            }
        }
        
        return res;
    }
};

