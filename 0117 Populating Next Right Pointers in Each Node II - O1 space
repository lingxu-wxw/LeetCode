/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        // -100 <= Node.val <= 100, 选用一个不会取到的值作为dummy node
        Node* dummy = new Node(-101);
        
        // cur用作遍历，head用作返回
        Node* cur = dummy;
        Node* head = root;
        
        // dummy始终会在root结点的下一次串起一个list，用作下一轮遍历
        while (root) {
            // 将left和right依次链接上dummy list
            if (root->left) {
                cur->next = root->left;
                cur = cur->next;
            }
            if (root->right) {
                cur->next = root->right;
                cur = cur->next;
            }
            
            // 横向遍历，这一个level的next在上一轮遍历中dummy list已经设置好了
            root = root->next;
            
            // 如果为NULL表示当前level遍历完了，重置cur构建新的dummy list
            if (!root) {
                cur = dummy;
                root = dummy->next;
                dummy->next = NULL;
            }
        }
        
        return head;
    }
};
