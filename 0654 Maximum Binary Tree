// Input: nums = [3,2,1,6,0,5]
// Output: [6,3,5,null,2,0,null,null,1]
// Explanation: The recursive calls are as follow:
// - The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].
//     - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].
//         - Empty array, so no child.
//         - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].
//             - Empty array, so no child.
//             - Only one element, so child is a node with value 1.
//     - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].
//         - Only one element, so child is a node with value 0.
//         - Empty array, so no child.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        if (nums.empty() || nums.size() == 0) {
            return NULL;
        }
        
        // 寻找数组中的最大value
        int size = nums.size();
        int maxnum = nums[0];
        int maxidx = 0;
        
        for (int i = 1; i < size; i++) {
            if (nums[i] > maxnum) {
                maxnum = nums[i];
                maxidx = i;
            }
        }
        
        // 切分左右subarray，生成左右子树
        TreeNode* root = new TreeNode(maxnum);
        
        vector<int> leftnums = vector<int>(nums.begin(), nums.begin() + maxidx);
        vector<int> rightnums = vector<int>(nums.begin() + maxidx + 1, nums.end());
        
        root->left = constructMaximumBinaryTree(leftnums);
        root->right = constructMaximumBinaryTree(rightnums);
        
        return root;
    }
};
