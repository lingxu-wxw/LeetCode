/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    // For example:
    // Given binary tree [3,9,20,null,null,15,7],
    //     3
    //    / \
    //   9  20
    //     /  \
    //    15   7
    // return its zigzag level order traversal as:
    // [
    //   [3],
    //   [20,9],
    //   [15,7]
    // ]
    
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        // 继续广度优先搜索
        // 因为zigzag的原因，这里应该不用queue，改用stack，两个
        if (!root) return {};
        
        vector<vector<int>> res;
        vector<int> onelevel;
        stack<TreeNode*> odd_s;
        stack<TreeNode*> even_s;
        
        odd_s.push(root);
        
        // 奇偶栈只应有一个栈有值
        while (!odd_s.empty() || !even_s.empty()) {
            // 奇数level的栈，左孩子先进后出
            while (!odd_s.empty()) {
                TreeNode *t = odd_s.top();
                odd_s.pop();
                onelevel.push_back(t->val);
                if (t->left) even_s.push(t->left);
                if (t->right) even_s.push(t->right); 
            }
            if (!onelevel.empty()) res.push_back(onelevel);
            onelevel.clear();
            
            // 偶数level的栈, 右孩子先进后出
            while (!even_s.empty()) {
                TreeNode *t = even_s.top();
                even_s.pop();
                onelevel.push_back(t->val);
                if (t->right) odd_s.push(t->right);
                if (t->left) odd_s.push(t->left); 
            }
            if (!onelevel.empty()) res.push_back(onelevel);
            onelevel.clear();
        }
        
        return res;
    }
};
