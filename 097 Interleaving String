class Solution {
public:
    
    // Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
    // Output: true
    
    bool isInterleave(string s1, string s2, string s3) {
        // interleave : 交叉
        // 其中dp[i][j]表示的是s1的前i个字符和s2的前j个字符是否匹配s3的前i+j个字符
        
        if (s1.size() + s2.size() != s3.size()) return false;
        
        int m = s1.size(), n = s2.size();
        vector<vector<bool> > dp(m+1, vector<bool>(n+1, false));
        
        // 初始化动态数组
        dp[0][0] = true;
        
        for (int i = 1; i <= m; i++) {
            dp[i][0] = (s1[i-1] == s3[i-1]) && dp[i-1][0];
        }
        for (int j = 1; j <= n; j++) {
            dp[0][j] = (s2[j-1] == s3[j-1]) && dp[0][j-1];
        }
        
        // 用递推式导出整个动态数组
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = (dp[i-1][j] && (s1[i-1] == s3[i+j-1]))
                    || (dp[i][j-1] && (s2[j-1] == s3[i+j-1]));
            }
        }
        
        return dp[m][n];
    }
};
