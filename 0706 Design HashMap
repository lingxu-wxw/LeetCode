// Input
// ["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
// [[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
// Output
// [null, null, null, 1, -1, null, 1, null, -1]

// Explanation
// MyHashMap myHashMap = new MyHashMap();
// myHashMap.put(1, 1); // The map is now [[1,1]]
// myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
// myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
// myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
// myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
// myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
// myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
// myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]

struct Node {
    int key;
    int val;
    Node *next;
    Node() : key(0), val(0), next(nullptr) {}
    Node(int k, int v) : key(k), val(v), next(nullptr) {}
    Node(int k, int v, Node *next) : key(k), val(v), next(next) {}
};

class MyHashMap {
public:
    MyHashMap() {
        head = new Node(-1, -1);
    }
    
    void put(int key, int value) {
        Node* cur = head->next;
        
        while (cur) {
            if (cur->key == key) {
                cur->val = value;
                return;
            }
            cur = cur->next;
        }
        
        Node* node = new Node(key, value);
        
        node->next = head->next;
        head->next = node;
    }
    
    int get(int key) {
        Node* cur = head->next;
        
        while (cur) {
            if (cur->key == key) {
                return cur->val;
            }
            cur = cur->next;
        }
        
        return -1;
    }
    
    void remove(int key) {
        Node* prev = head;
        Node* cur = head->next;
        
        while (cur) {
            if (cur->key == key) {                
                prev->next = cur->next;
                delete cur;
                return;
            }
            
            prev = prev->next;
            cur = cur->next;
        }
    }
    
private:
    Node *head;
};

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap* obj = new MyHashMap();
 * obj->put(key,value);
 * int param_2 = obj->get(key);
 * obj->remove(key);
 */
