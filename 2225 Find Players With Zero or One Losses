// Input: matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]
// Output: [[1,2,10],[4,5,7,8]]
// Explanation:
// Players 1, 2, and 10 have not lost any matches.
// Players 4, 5, 7, and 8 each have lost one match.
// Players 3, 6, and 9 each have lost two matches.
// Thus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8].

class Solution {
public:
    vector<vector<int>> findWinners(const vector<vector<int>>& matches) {
        unordered_map<int, int> loseCount;
        for (const auto& match : matches) {
            loseCount[match[0]] += 0;   // winner
            loseCount[match[1]] += 1;   // loser
        }

        vector<vector<int>> res;
        res.reserve(2);
        vector<int> zeroLose;
        vector<int> oneLose;
        for (const auto& iter : loseCount) {
            if (iter.second == 0) {
                zeroLose.emplace_back(iter.first);
            }
            if (iter.second == 1) {
                oneLose.emplace_back(iter.first);
            }
        }

        sort(zeroLose.begin(), zeroLose.end());
        sort(oneLose.begin(), oneLose.end());
        res.emplace_back(zeroLose);
        res.emplace_back(oneLose);
        return res;
    }
};