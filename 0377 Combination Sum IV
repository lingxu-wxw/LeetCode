// Input: nums = [1,2,3], target = 4
// Output: 7
// Explanation:
// The possible combination ways are:
// (1, 1, 1, 1)
// (1, 1, 2)
// (1, 2, 1)
// (1, 3)
// (2, 1, 1)
// (2, 2)
// (3, 1)
// Note that different sequences are counted as different combinations.

class Solution {
public:
    
    // 常规的思路是递归，但是因为元素允许重复，会比较麻烦
    
    int combinationSum4(vector<int>& nums, int target) {
        int size = nums.size();
        
        // dp[i]表示从nums中选，总和为i的可能性的数量
        vector<unsigned long> dp(target+1, 0);
        dp[0] = 1;
        
        // 先遍历target，再遍历nums
        for (int sum = 1; sum <= target; sum++) {
            for (int i = 0; i < size; i++) {
                if (sum >= nums[i]) {
                    // 总和为sum的可能性 <<= 总和为sum-nums[i]的可能性 + 选中nums[i]
                    unsigned long tmp = dp[sum] + dp[sum-nums[i]];
                    dp[sum] = tmp;
                }
            }
        }
        
        return dp[target];
    }
};
