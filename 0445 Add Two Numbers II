// Input: l1 = [7,2,4,3], l2 = [5,6,4]
// Output: [7,8,0,7]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<int> s1, s2;
        
        // 将两个链表压入stack中
        while (l1) {
            s1.push(l1->val);
            l1 = l1->next;
        }

        while (l2) {
            s2.push(l2->val);
            l2 = l2->next;
        }
        
        // 记录单个位数的结果
        // sum每回合不清零，通过 sum/10 保持进位
        int sum = 0;
        
        ListNode* dummy = new ListNode(0);
        
        while (!s1.empty() || !s2.empty()) {
            if (!s1.empty()) {
                sum += s1.top(); s1.pop();
            }
            if (!s2.empty()) {
                sum += s2.top(); s2.pop();
            }
            
            // 防止顶端进位
            dummy->val = sum / 10;
            
            ListNode* num = new ListNode(sum % 10);
            num->next = dummy->next;
            dummy->next = num;
            
            // 这样就保留了进位
            sum = sum / 10;
        }
        
        return (dummy->val == 0) ? dummy->next : dummy;
    }
};
