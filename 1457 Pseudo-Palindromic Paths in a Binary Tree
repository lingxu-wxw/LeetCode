// Input: root = [2,3,1,3,1,null,1]
// Output: 2 
// Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isPseudoPalindrome(const vector<int>& frequency) {
        int oddCount = 0;
        for (const int count : frequency) {
            if (count % 2 == 1) {
                oddCount++;
            }
        }
        return (oddCount <= 1);
    }

    int helperDFS(TreeNode *root, vector<int>& frequency) {
        if (!root) return 0;

        frequency[root->val]++;
        int pathCount = 0;
        if (!root->left && !root->right) {
            if (isPseudoPalindrome(frequency)) {
                pathCount = 1;
            }
        } else {
            pathCount = helperDFS(root->left, frequency) + helperDFS(root->right, frequency);
        }
        frequency[root->val]--;

        return pathCount;
    }

    int pseudoPalindromicPaths (TreeNode* root) {
        vector<int> frequency(10, 0);
        return helperDFS(root, frequency);
    }
};