// Input
// ["CombinationIterator", "next", "hasNext", "next", "hasNext", "next", "hasNext"]
// [["abc", 2], [], [], [], [], [], []]
// Output
// [null, "ab", true, "ac", true, "bc", false]

// Explanation
// CombinationIterator itr = new CombinationIterator("abc", 2);
// itr.next();    // return "ab"
// itr.hasNext(); // return True
// itr.next();    // return "ac"
// itr.hasNext(); // return True
// itr.next();    // return "bc"
// itr.hasNext(); // return False

class CombinationIterator {
public:
    CombinationIterator(string characters, int combinationLength) {
        int mask = initMask(combinationLength);
        int maxmask = initMaxMask(characters, combinationLength);
        
        while (mask <= maxmask) {
            combinations.push_back(getNextStr(characters, mask));            
            mask = getNextMask(mask);
        }
    }
    
    string next() {
        if (!hasNext()) return "";
        string str = combinations.back();
        combinations.pop_back();
        return str;
    }
    
    bool hasNext() {
        return combinations.size() > 0;
    }

private:
    // 倒序存放要输出的组合数字符串
    vector<string> combinations;
    
    // 初始化bitmask
    int initMask(int len) {
        int mask = 0;
        for (int i = 0; i < len; i++) {
            mask = (mask << 1) | 1;
        }
        return mask;
    }
    
    // 初始化最大bitmask
    int initMaxMask(string strs, int len) {
        int maxmask = 0;
        int i = 0;
        for (; i < len; i++) {
            maxmask = (maxmask << 1) | 1;
        }
        for (; i < strs.length(); i++) {
            maxmask = maxmask << 1;
        }
        return maxmask;
    }
    
    // 获取下一个拥有相同个数1的bitmask
    // mask:        1 0 0 1 1 1 0
    // nextmask:    1 0 1 0 0 1 1 
    
    // mask:        1 0 0 1 1 1 0
    // -mask:       0 1 1 0 0 1 0
    // x:           0 0 0 0 0 1 0   二进制表示中最右边的1, 最右边的连续1位串的开始
    
    // mask:        1 0 0 1 1 1 0
    // x:           0 0 0 0 0 1 0
    // t:           1 0 1 0 0 0 0   将连续的1位串中最左边的1向左“移动”一位, 但丢失了后边的连续1位串
    
    // mask^t:          0 0 1 1 1 1 0   只包含连续1位串, 但相比原先多了一位, 相比目标连续串多了2位
    // (mask^t)/x:      0 0 0 1 1 1 1 
    // (mask^t)/x>>2:   0 0 0 0 0 1 1   目标串中的低位
    // t:               1 0 1 0 0 0 0   目标串中的高位
    // nextmask:        1 0 1 0 0 1 1 
    int getNextMask(int mask) {
        int x = mask & (-mask);      
        int t = mask + x;
        int nextmask = t | (((mask^t) / x) >> 2);
        return nextmask;
    }
    
    // 获取下一个组合数字符串
    string getNextStr(string strs, int mask) {
        string res = "";
        for (int i = strs.length()-1; i >= 0; i--) {
            if (mask & 1) {
                res = strs[i] + res;
            }
            mask = mask >> 1;
        }
        return res;
    }
};

/**
 * Your CombinationIterator object will be instantiated and called as such:
 * CombinationIterator* obj = new CombinationIterator(characters, combinationLength);
 * string param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
