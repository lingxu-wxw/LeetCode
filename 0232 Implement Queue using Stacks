class MyQueue {
private:
    stack<int> masterStack;
    stack<int> servantStack;
    
public:
    /** Initialize your data structure here. */
    MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    void push(int x) {
        if (!empty()) {
            while (!masterStack.empty()) {
                servantStack.push(masterStack.top());
                masterStack.pop();
            }
            masterStack.push(x);
            while (!servantStack.empty()) {
                masterStack.push(servantStack.top());
                servantStack.pop();
            }
        } else {
            // 第一个元素
            masterStack.push(x);
        }
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int val = masterStack.top();
        masterStack.pop();
        return val;
    }
    
    /** Get the front element. */
    int peek() {
        return masterStack.top();
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return masterStack.empty();
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
