// Input: s = "00110011"
// Output: 6
// Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: 
//      "0011", "01", "1100", "10", "0011", and "01".
// Notice that some of these substrings repeat and are counted the number of times they occur.
// Also, "00110011" is not a valid substring because all the 0's (and 1's) are not grouped together.

class Solution {
public:
    int countBinarySubstrings(string s) {
        int len = s.length();
        
        vector<int> vec;    // 保存连续相同的0/1出现的个数
        int count = 1;
        int res = 0;
        
        // 字符串最后有\0
        for (int i = 0; i < len; i++) {
            if (s[i] != s[i+1]) {
                vec.push_back(count);
                count = 1;
            } else {
                count++;
            }
        }
        
        // 比较两边更小的部分
        for (int i = 0; i < vec.size() - 1; i++) {
            res += min(vec[i], vec[i+1]);
        }
        
        return res;
    }
};
