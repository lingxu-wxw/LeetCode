// Input: root = [1,2,3,4,5]
// Output: 3
// Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int postorder(TreeNode* root, int& res) {
        // 如果是叶子结点
        if (!root) return 0;
        
        if (!root->left && !root->right) {
            return 1;
        }
        
        // 访问左孩子和右孩子
        int left = 0, right = 0;
        if (root->left) {
            left = postorder(root->left, res);
        }
        if (root->right) {
            right = postorder(root->right, res);
        }
        
        // 更新最大值，表示经过当前root和左右子树
        res = max(res, left + right);
        
        // 如果返回更上层，只能挑左子树右子树其中一个
        return max(left, right) + 1;
    }
    
    int diameterOfBinaryTree(TreeNode* root) {
        int res = 0;
        
        postorder(root, res);
        
        return res;
    }
};
