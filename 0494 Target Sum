// Input: nums = [1,1,1,1,1], target = 3
// Output: 5
// Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
// -1 + 1 + 1 + 1 + 1 = 3
// +1 - 1 + 1 + 1 + 1 = 3
// +1 + 1 - 1 + 1 + 1 = 3
// +1 + 1 + 1 - 1 + 1 = 3
// +1 + 1 + 1 + 1 - 1 = 3

class Solution {
public:
    
    void findTargetSumWaysDFS(vector<int>& nums, int idx, int target, int sum, int& cnt) {
        // 遍历到头以后无论如何都要结束了
        if (idx == nums.size()) {
            if (sum == target) {
                cnt++;
            }
            return;
        }
        
        // 递归遍历
        // 所有element都需要的就不用for循环，有的element可以不要有popback的需要for循环 和0491横向对比
        findTargetSumWaysDFS(nums, idx+1, target, sum+nums[idx], cnt);
        findTargetSumWaysDFS(nums, idx+1, target, sum-nums[idx], cnt);
    }
    
            
    int findTargetSumWays(vector<int>& nums, int target) {
        int cnt = 0;
        
        findTargetSumWaysDFS(nums, 0, target, 0, cnt);
        
        return cnt;
    }
};
