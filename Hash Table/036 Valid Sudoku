class Solution {
public:
    //Input: ["5","3",".",".","7",".",".",".","."], ....
    
    bool isValidSudoku(vector<vector<char>>& board) {
        if (board.empty() || board[0].empty()) return false;
        
        //行和列数
        int row = board.size(), col = board[0].size();
        
        //判断函数, num是否在x行/列/块中, col个元素, 每个元素row个内容
        vector<vector<bool> > rowflag(row, vector<bool>(col, false));
        vector<vector<bool> > colflag(row, vector<bool>(col, false));
        vector<vector<bool> > cellflag(row, vector<bool>(col, false));
        
        for (int i = 0; i < row; i++){
            for (int j = 0; j < col; j++){
                if (board[i][j] >= '1' && board[i][j] <= '9'){
                    //获得数字
                    int num = board[i][j] - '1';
                    //如果违反flag
                    if (rowflag[i][num] || colflag[num][j] || cellflag[3*(i/3) + j/3][num])
                        return false;
                    //修改flag
                    rowflag[i][num] = true;
                    colflag[num][j] = true;
                    cellflag[3*(i/3) + j/3][num] = true;
                }
            }
        }
        
        return true;
    }
};
