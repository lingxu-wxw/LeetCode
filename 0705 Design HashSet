// Input
// ["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]
// [[], [1], [2], [1], [3], [2], [2], [2], [2]]
// Output
// [null, null, null, true, false, null, true, null, false]

// Explanation
// MyHashSet myHashSet = new MyHashSet();
// myHashSet.add(1);      // set = [1]
// myHashSet.add(2);      // set = [1, 2]
// myHashSet.contains(1); // return True
// myHashSet.contains(3); // return False, (not found)
// myHashSet.add(2);      // set = [1, 2]
// myHashSet.contains(2); // return True
// myHashSet.remove(2);   // set = [1]
// myHashSet.contains(2); // return False, (already removed)

class MyHashSet {
public:
    MyHashSet() {
        head = new ListNode(-1);
    }
    
    void add(int key) {
        if (contains(key)) return;
            
        ListNode* node = new ListNode(key);
        
        node->next = head->next;
        head->next = node;
    }
    
    void remove(int key) {
        ListNode* prev = head;
        ListNode* cur = head->next;
        
        while (cur) {
            if (cur->val == key) {                
                prev->next = cur->next;
                return;
            }
            
            prev = prev->next;
            cur = cur->next;
        }
    }
    
    bool contains(int key) {
        ListNode* cur = head->next;
        
        while (cur) {
            if (cur->val == key) {
                return true;
            }
            cur = cur->next;
        }
        
        return false;
    }

private:
    ListNode* head;
};

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet* obj = new MyHashSet();
 * obj->add(key);
 * obj->remove(key);
 * bool param_3 = obj->contains(key);
 */
