// Input: jobDifficulty = [6,5,4,3,2,1], d = 2
// Output: 7
// Explanation: First day you can finish the first 5 jobs, total difficulty = 6.
// Second day you can finish the last job, total difficulty = 1.
// The difficulty of the schedule = 6 + 1 = 7

class Solution {
public:
    int minDifficulty(const vector<int>& jobDifficulty, int dayCount) {
        int jobCount = jobDifficulty.size();
        if (jobCount < dayCount) {
            return -1;
        }
        if (jobCount == dayCount) {
            int totalDifficulty = 0;
            for (const int difficulty : jobDifficulty) {
                totalDifficulty += difficulty;
            }
            return totalDifficulty;
        }

        // 压缩空间: dp[i]表示完成前j+1个任务的最小难度
        vector<int> dp(jobCount, -1);
        dp[0] = jobDifficulty[0];
        for (int i = 1; i < jobCount; i++) {
            dp[i] = max(dp[i-1], jobDifficulty[i]);
        }

        // 先更新一天做完任务的dp数组，再更新两天做完任务的dp数组，以此类推
        for (int i = 1; i < dayCount; i++) {
            // 遍历顺序需要反过来，因为一维dp数组会修改
            for (int j = jobCount - 1; j >= i; j--) {
                // 从第j个任务往前推，分配一部分任务放到新的一天做
                int maxDifficulty = 0;         // 第k~j个任务里最难的任务
                int minDifficulty = INT_MAX;   // 完成第j个任务的最小难度
                for (int k = j; k >= i; k--) {
                    maxDifficulty = max(maxDifficulty, jobDifficulty[k]);
                    minDifficulty = min(minDifficulty, dp[k-1] + maxDifficulty);
                }
                dp[j] = minDifficulty;
            }
        }

        return dp[jobCount-1];
    }
};