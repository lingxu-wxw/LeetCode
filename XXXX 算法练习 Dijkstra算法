struct Polar{
    int dist, id;
    Polar(int dist, int id) : dist(dist), id(id){}
};

struct cmp{
    bool operator ()(Polar a, Polar b){ 
        return a.dist > b.dist;    // 这里是大于，使得距离短的先出队
    }
};

priority_queue<Polar, vector<Polar>, cmp> Q;

void Dij(int s)
{
    dist[s] = 0;
    Q.push(Polar(0, s));
    while (!Q.empty())
    {
        int p = Q.top().id;
        Q.pop();
        if (vis[p])
            continue;
        vis[p] = 1;
        for (int e = head[p]; e != 0; e = edges[e].next)
        {
            int to = edges[e].to;
            dist[to] = min(dist[to], dist[p] + edges[e].w);
            if (!vis[to])
                Q.push(Polar(dist[to], to));
        }
    }
}
