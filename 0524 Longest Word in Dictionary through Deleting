// Input: s = "abpcplea", dictionary = ["ale","apple","monkey","plea"]
// Output: "apple"

class Solution {
public:
    
    // s1是不是应该排在s2前面
    static bool comp(string& s1, string& s2) {
        int s1len = s1.length(), s2len = s2.length();
        
        // 字符串长度
        if (s1len > s2len) {
            return true;
        }
        
        // 字母序
        // s1.compare(s2) < 0 也表示s1的字母序更小
        else if (s1len == s2len) {
            for (int i = 0; i < s1len; i++) {
                if (s1[i] == s2[i]) continue;
                return s1[i] < s2[i];
            }
            return true;
        }
        
        return false;
    }  
    
    string findLongestWord(string s, vector<string>& dictionary) {
        int slen = s.length();
        
        vector<string> words;
        
        // 快慢指针找到合适的单词
        int fast = 0, slow = 0;
        
        for (string word : dictionary) {
            int wlen = word.length();
            
            while (fast < slen && slow < wlen) {
                if (s[fast] == word[slow]) {
                    slow++;
                }
                fast++;
            }
            
            // 找到合适的单词
            if (slow == wlen) {
                words.push_back(word);
            }
            
            fast = 0;
            slow = 0;
        }
        
        // 对找到的单词进行挑选，找出的最长的中字母序最小的
        sort(words.begin(), words.end(), comp);
        
        return words.size() > 0 ? words[0] : "";
    }
};
