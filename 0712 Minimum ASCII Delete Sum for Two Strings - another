// Input: s1 = "sea", s2 = "eat"
// Output: 231
// Explanation: Deleting "s" from "sea" adds the ASCII value of "s" (115) to the sum.
// Deleting "t" from "eat" adds 116 to the sum.
// At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.

class Solution {
public:
    int minimumDeleteSum(string s1, string s2) {
        // 先求出最长公共子序列，这就是s1/s2各自删除一部分字符后所能得到的最长结果
        // 需要删除的字符ascii和为 sum(s1) + sum(s2) - sum(common) * 2
        // dp[i][j]表示s1前i个字符和s2前j个字符的最长公共子序列的ascii和，参考 1143 Longest Common Subsequence
        
        int len1 = s1.length(), len2 = s2.length();
        vector<vector<int> > dp(len1+1, vector<int>(len2+1, 0));
        
        for (int i = 1; i <= len1; i++) {
            for (int j = 1; j <= len2; j++) {
                if (s1[i-1] == s2[j-1]) {
                    dp[i][j] = dp[i-1][j-1] + (int)s1[i-1]; 
                } else {
                    dp[i][j] = max(dp[i][j-1], dp[i-1][j]);
                }
            }
        }
        
        // 计算s1/s2各自的ascii和
        int sum1 = accumulate(s1.begin(), s1.end(), 0);
        int sum2 = accumulate(s2.begin(), s2.end(), 0);
        
        return sum1 + sum2 - 2 * dp[len1][len2];
    }
};
