// Input: nums = [10,9,2,5,3,7,101,18]
// Output: 4
// Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.

class Solution {
public:
    
    // 遍历A中的所有的元素 x = A[i]
    // 如果x > B的末尾元素，则将x追加到B的末尾，end+=1
    // 如果x < B的末尾元素，则利用二分查找，寻找B中第一个大于x的元素，并用x进行替换 
    //      e.g. x= 4 B=[1,3,5,6] ==> B=[1,3,4,6]
    // 遍历结束之后，B的长度则为最长递增子序列的长度
    
    // 在arr中找到第一个比target大的
    int binarySearch(vector<int>& arr, int target) {
        int size = arr.size();
        int left = 0, right = size - 1; 
        
        while (left < right) {
            int mid = (left + right) / 2;
            if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        } 
        
        return left;
    }
    
    int lengthOfLIS(vector<int>& nums) {
        int size = nums.size();
        if (size == 1) return 1;
        
        vector<int> arr;
        arr.push_back(nums[0]);
        
        for (int i = 0; i < size; i++) {
            if (nums[i] > arr.back()) {
                arr.push_back(nums[i]);
            } else {
                int idx = binarySearch(arr, nums[i]);
                arr[idx] = nums[i];
            }
        }
        
        return arr.size();
    }
};
