/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    // Input: [1,3,null,null,2]
    //    1
    //   /
    //  3
    //   \
    //    2

    // Output: [3,1,null,null,2]
    // 
    //    3
    //   /
    //  1
    //   \
    //    2
    
    
    // 三个指针，first，second分别表示第一个和第二个错乱位置的节点
    // pre指向当前节点的中序遍历的前一个节点
    TreeNode *pre = NULL, *first = NULL, *second = NULL;
    
    void inorder(TreeNode *root) {
        // 传统的中序遍历，在中间的时候判断前一个节点和当前结点是否乱序
        if (!root) return;
        
        inorder(root->left);
        
        if (!pre) pre = root;
        else {
            // 找到乱序结点, 
            if (pre->val > root->val) {
                if (!first) first = pre;
                second = root;
            }
            pre = root;
        }
        
        inorder(root->right);
    } 
    
    void recoverTree(TreeNode* root) {
        // A solution using O(n) space is pretty straight forward.
        inorder(root);
        swap(first->val, second->val);
    }
};
