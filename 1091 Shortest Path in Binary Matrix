// Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
// Output: 4

class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        if (grid[0][0] != 0 || grid[n-1][n-1] != 0) return -1;
        
        vector<vector<int>> directions = {{-1, 1}, {0, 1}, {1, 1}, {1, 0}, {1, -1}, {0, -1}, {-1, -1}, {-1, 0}};
        
        queue<pair<int, int>> q;
        int step = 0;
            
        q.push({0, 0});
        grid[0][0] = 1;
        
        while (!q.empty()) {
            int size = q.size();
            step++;
            
            for (int i = 0; i < size; i++) {
                auto idx = q.front();
                q.pop();
                
                if (idx.first == n-1 && idx.second == n-1) {
                    return step;
                }
                
                for (auto dir : directions) {
                    int newi = idx.first + dir[0];
                    int newj = idx.second + dir[1];
                    
                    if (newi >= 0 && newi < n && newj >= 0 && newj < n && grid[newi][newj] == 0) {
                        q.push({newi, newj});
                        grid[newi][newj] = 1;
                    }
                }
            }
        }
        
        return -1;
    }
};
