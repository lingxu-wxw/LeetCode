// Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
// Output: 6
// Explanation: The answer is not 11, because the island must be connected 4-directionally.

class Solution {
public:
    
    vector<vector<int>> directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    
    void helper(vector<vector<int>>& grid, vector<vector<bool>>& visited, int i, int j, int& cnt) {
        int height = grid.size();
        int width = grid[0].size();
        
        if (i < 0 || i >= height || j < 0 || j >= width || visited[i][j]) return;
        visited[i][j] = true;
        
        if (grid[i][j] == 0) return;
        cnt++;
        
        for (auto dir : directions) {
            int newi = i + dir[0];
            int newj = j + dir[1];
            helper(grid, visited, newi, newj, cnt);
        }
    }
    
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int height = grid.size();
        int width = grid[0].size();
        
        vector<vector<bool>> visited(height, vector<bool>(width, false));
        int maxisland = 0;
    
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                if (visited[i][j]) continue;
                
                int cnt = 0;
                helper(grid, visited, i, j, cnt);
                maxisland = max(maxisland, cnt);
            }
        }
        
        return maxisland;
    }
};
