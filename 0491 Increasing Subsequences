// Input: nums = [4,6,7,7]
// Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]

class Solution {
public:
    
    void findSubsequencesDFS(vector<int>& nums, int start, vector<vector<int>>& res, vector<int>& cur) {
        if (cur.size() >= 2) {
            res.push_back(cur);
        }
        
        // 用于在一轮循环中去重
        unordered_set<int> set;
        
        for (int i = start; i < nums.size(); i++) {
            if ((!cur.empty() && cur.back() > nums[i]) || set.count(nums[i])) {
                continue;
            }
            
            cur.push_back(nums[i]);
            set.insert(nums[i]);
            findSubsequencesDFS(nums, i + 1, res, cur);
            cur.pop_back();
        }
    }
    
    
    vector<vector<int>> findSubsequences(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> cur;
        
        findSubsequencesDFS(nums, 0, res, cur);
        
        return res;
    }
};
