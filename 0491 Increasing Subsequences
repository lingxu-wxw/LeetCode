// Input: nums = [4,6,7,7]
// Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]

class Solution {
public:
    
    void findSubsequencesDFS(vector<int>& nums, int idx, vector<vector<int>>& res, vector<int> cur) {
        if (idx == nums.size()) {
            return;
        }
        
        // 子序列的第一个元素
        if (cur.empty()) {
            cur.push_back(nums[idx]);
            findSubsequencesDFS(nums, idx+1, res, cur);
                
            cur.pop_back();
            findSubsequencesDFS(nums, idx+1, res, cur);
        }
        // 子序列的后续元素
        else {
            if (nums[idx] < cur.back()) {
                findSubsequencesDFS(nums, idx+1, res, cur);
            } 
            else {
                cur.push_back(nums[idx]);
                res.push_back(cur);
                findSubsequencesDFS(nums, idx+1, res, cur);
                
                cur.pop_back();
                findSubsequencesDFS(nums, idx+1, res, cur);
            }
        }
    }
    
    
    vector<vector<int>> findSubsequences(vector<int>& nums) {
        vector<vector<int>> res;    
        findSubsequencesDFS(nums, 0, res, {});
    
        // unique只能删除相邻的重复元素
        sort(res.begin(), res.end());
        res.erase(unique(res.begin(), res.end()), res.end());
        return res;
    }
};
