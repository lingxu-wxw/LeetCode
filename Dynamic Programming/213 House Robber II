// Input: nums = [2,3,2]
// Output: 3
// Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.

class Solution {
public:
    int rob(vector<int>& nums) {
        int size = nums.size();
        if (size == 0) return 0;
        if (size == 1) return nums[0];
        
        vector<int> dpl(size, 0);
        vector<int> dpr(size, 0);
        
        dpl[0] = 0;
        dpl[1] = nums[0];
        dpr[0] = 0;
        dpr[1] = nums[1];
        
        for (int i = 2; i < size; i++) {
            dpl[i] = max(dpl[i-1], dpl[i-2]+nums[i-1]);
        }
        for (int i = 2; i < size; i++) {
            dpr[i] = max(dpr[i-1], dpr[i-2]+nums[i]);
        }
        
        return max(dpl[size-1], dpr[size-1]);
    }
};
