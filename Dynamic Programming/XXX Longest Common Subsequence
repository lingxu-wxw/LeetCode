class Solution {
public:
    // 最长公共子串
    int longestCommonSubstring(string text1, string text2) {
        int size1 = text1.size(), size2 = text2.size();
        
        int maxlen = 0;
        
        // dp[i][j]表示以text1[i]和text2[j]为结尾的最长公共子串
        vector<vector<int>> dp(size1, vector<int>(size2, 0));
        
        for (int i = 0; i < size1; i++) {
            if (text1[i] == text2[0]) {
                dp[i][0] = 1;
                maxlen = 1;
            }
        }
        for (int j = 0; j < size2; j++) {
            if (text1[0] == text2[j]) {
                dp[0][j] = 1;
                maxlen = 1;
            }
        }
        
        for (int i = 1; i < size1; i++) {
            for (int j = 1; j < size2; j++) {
                // 因为dp[i][j]的设定是以text1[i]和text2[j]为结尾
                if (text1[i] == text2[j]) {
                    dp[i][j] = dp[i-1][j-1] + 1; 
                    maxlen = max(maxlen, dp[i][j]);
                } else {
                    dp[i][j] = 0;
                }
            }
        }
        
        return maxlen;
    }
};
