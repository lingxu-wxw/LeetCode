// Input: nums = [4,3,2,6]
// Output: 26
// Explanation:
// F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
// F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
// F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
// F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26
// So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.

class Solution {
public:
    int maxRotateFunction(vector<int>& nums) {
        int size = nums.size();
        
        // 整个数组的总和
        int sum = 0;
        // rotate function的初始值
        int rotateSum = 0;
        
        for (int i = 0; i < size; i++) {
            sum += nums[i];
            rotateSum += i * nums[i];
        }
        
        int maxRotateSum = rotateSum;
        
        // 遍历n-1种情况，算上init总共n种
        for (int i = size-1; i > 0; i--) {
            rotateSum = rotateSum + sum - size*nums[i];
            maxRotateSum = max(maxRotateSum, rotateSum);
        }
        
        return maxRotateSum;
    }
};
