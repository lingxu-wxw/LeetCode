// Input: s1 = "sea", s2 = "eat"
// Output: 231
// Explanation: Deleting "s" from "sea" adds the ASCII value of "s" (115) to the sum.
// Deleting "t" from "eat" adds 116 to the sum.
// At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.

class Solution {
public:
    int minimumDeleteSum(string s1, string s2) {
        // 动态规划: dp[i][j]表示从s1的前i个字符转换到s2的前j个字符所需要的最小ascii值
        
        int len1 = s1.length(), len2 = s2.length();
        vector<vector<int> > dp(len1+1, vector<int>(len2+1, 0));
        
        // 初始化两条idx=0的边，即有一个字符串为空
        for (int i = 1; i <= len1; i++) {   
            dp[i][0] = dp[i-1][0] + s1[i-1];
        }
        for (int j = 1; j <= len2; j++) {
            dp[0][j] = dp[0][j-1] + s2[j-1];
        }
        
         // 动态规划
        for (int i = 1; i <= len1; i++) {
            for (int j = 1; j <= len2; j++) {
                // 新添加的字符相等
                if (s1[i-1] == s2[j-1]) {
                    dp[i][j] = dp[i-1][j-1];
                }
                // 不相等的话删掉一个ascii值较小的
                else {
                    dp[i][j] = min(dp[i-1][j] + (int)s1[i-1], dp[i][j-1] + (int)s2[j-1]);
                }
            }
        }
        
        return dp[len1][len2];
    }
};
