// Input: digits = ["1","3","5","7"], n = 100
// Output: 20
// Explanation: 
// The 20 numbers that can be written are:
// 1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.

class Solution {
public:
    int atMostNGivenDigitSet(vector<string>& digits, int n) {
        int size = digits.size();
        string nstr = to_string(n);
        int len = nstr.length();
        
        int res = 0;
        
        // 先加上位数小于n的全排列
        for (int i = 0; i < len-1; i++) {
            res += pow(size, i+1);
        }
        
        // 考虑位数相同的情况
        for (int i = 0; i < len; i++) {
            bool hasSameNum = false;
            
            for (string digit : digits) {  
                if (digit[0] < nstr[i]) {
                    res += pow(size, len - i - 1);
                } 
                else if (digit[0] == nstr[i]) {
                    hasSameNum = true;
                } 
            }
            
            // 没有相同数字就可以返回，大于小于不重要
            if (!hasSameNum) {
                return res;
            }
        }
        
        // 走到这里说明最后一位有相同的情况
        return res + 1;
    }
};
