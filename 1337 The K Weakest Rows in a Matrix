// Input: mat = 
// [[1,1,0,0,0],
//  [1,1,1,1,0],
//  [1,0,0,0,0],
//  [1,1,0,0,0],
//  [1,1,1,1,1]], 
// k = 3
// Output: [2,0,3]

// Explanation: 
// The number of soldiers in each row is: 
// - Row 0: 2 
// - Row 1: 4 
// - Row 2: 1 
// - Row 3: 2 
// - Row 4: 5 
// The rows ordered from weakest to strongest are [2,0,3,1,4].

class Solution {
public:
    
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        int height = mat.size();
        int width = mat[0].size();
        
        // 小顶堆，留在pq中的都是较小的元素
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        vector<int> res;
        
        for (int i = 0; i < height; i++) {
            int j = 0;
            while (j < width && mat[i][j] == 1) {
                j++;
            }
            pq.push({j, i});
        }
        
        for (int i = 0; i < k; i++) {
            res.push_back(pq.top().second);
            pq.pop();
        }
        
        return res;
    }
};
