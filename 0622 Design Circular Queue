// Input
// ["MyCircularQueue", "enQueue", "enQueue", "enQueue", "enQueue", "Rear", "isFull", "deQueue", "enQueue", "Rear"]
// [[3], [1], [2], [3], [4], [], [], [], [4], []]
// Output
// [null, true, true, true, false, 3, true, true, true, 4] 

// Explanation
// MyCircularQueue myCircularQueue = new MyCircularQueue(3);
// myCircularQueue.enQueue(1); // return True
// myCircularQueue.enQueue(2); // return True
// myCircularQueue.enQueue(3); // return True
// myCircularQueue.enQueue(4); // return False
// myCircularQueue.Rear();     // return 3
// myCircularQueue.isFull();   // return True
// myCircularQueue.deQueue();  // return True
// myCircularQueue.enQueue(4); // return True
// myCircularQueue.Rear();     // return 4

class MyCircularQueue {
public:
    MyCircularQueue(int k) {
        data.resize(k);
        head = 0;
        tail = 0;
        cursize = 0;
        size = k;
    }
    
    bool enQueue(int value) {
        if (isFull()) return false;
        
        data[tail] = value;
        tail = (tail + 1) % size;
        cursize++;
        return true;
    }
    
    bool deQueue() {
        if (isEmpty()) return false;
        
        head = (head + 1) % size;
        cursize--;
        return true;
    }
    
    int Front() {
        return (isEmpty()) ? -1 : data[head];
    }
    
    int Rear() {
        return (isEmpty()) ? -1 : data[(tail-1+size) % size];
    }
    
    bool isEmpty() {
        return (cursize == 0);
    }
    
    bool isFull() {
        return (cursize == size);
    }

private:
    vector<int> data;
    // head表示下一个要dequeue的位置，tail表示下一个要enqueue的位置
    int head, tail;
    int cursize, size;
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
