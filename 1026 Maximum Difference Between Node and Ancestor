// Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
// Output: 7
// Explanation: We have various ancestor-node differences, some of which are given below :
// |8 - 3| = 5
// |3 - 7| = 4
// |8 - 1| = 7
// |10 - 13| = 3
// Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    // 记录一条路径上的最大值和最小值
    // 遍历到叶子结点的时候开始结算，这样一定有parent-child的关系，也可以中间一步一结算
    void maxAncestorDiffDFS(TreeNode* node, int minval, int maxval, int& maxdiff) {
        if (!node) return;
        
        minval = min(minval, node->val);
        maxval = max(maxval, node->val);
        maxdiff = max(maxdiff, abs(maxval - minval));
        
        if (node->left) {
            maxAncestorDiffDFS(node->left, minval, maxval, maxdiff);
        }
        if (node->right) {
            maxAncestorDiffDFS(node->right, minval, maxval, maxdiff);
        }
    }
    
    int maxAncestorDiff(TreeNode* root) {
        int maxdiff = 0;
        maxAncestorDiffDFS(root, INT_MAX, INT_MIN, maxdiff);
        return maxdiff;
    }
};
