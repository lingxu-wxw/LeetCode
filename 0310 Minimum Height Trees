// Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]
// Output: [3,4]

class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if (n == 1) return {0};
        
        // 邻边图和遍历队列
        vector<unordered_set<int>> adjs(n);
        queue<int> queue;
        
        vector<int> res;
        
        // 初始化邻边图
        for (auto edge: edges) {
            adjs[edge[0]].insert(edge[1]);
            adjs[edge[1]].insert(edge[0]);
        }
        
        // 初始化queue：加入叶子结点
        for (int i = 0; i < n; i++) {
            if (adjs[i].size() == 1) {
                queue.push(i);
            }
        }
        
        // 从叶子节点向中心遍历，直到剩余结点数量为1或2
        while (n > 2) {
            int leafcnt = queue.size();
            n -= leafcnt;
            
            for (int i = 0; i < leafcnt; i++) {                
                int leaf = queue.front(); 
                queue.pop();
                
                // 删除叶子结点，更新adjs
                for (auto node : adjs[leaf]) {
                    adjs[node].erase(leaf);
                    if (adjs[node].size() == 1) {
                        queue.push(node);
                    }
                }
            }
        }
     
        // root只可能是一个或两个
        while (!queue.empty()) {
            res.push_back(queue.front());
            queue.pop();
        }
        
        return res;
    }
};
