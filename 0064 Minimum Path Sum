class Solution {
public:
    
    // Input:
    // [
    //   [1,3,1],
    //   [1,5,1],
    //   [4,2,1]
    // ]
    // Output: 7
    // Explanation: Because the path 1→3→1→1→1 minimizes the sum.
    
    int minPathSum(vector<vector<int>>& grid) {
        //主要思想: 动态规划
        //ps：动态规划可以只用一行数组来节省空间
    
        //特殊情况: 空
        if (grid.empty() || grid[0].empty()) return 0;
        
        //初值全都设为0, 为了边缘方便数组宽了一点
        int m = grid.size(), n = grid[0].size();
        vector<vector<long> > dp(m, vector<long>(n, 0));
        
        //边缘线初始化
        dp[0][0] = grid[0][0];
        
        for (int j = 1; j < n; j++) dp[0][j] = dp[0][j-1] + grid[0][j];       
        for (int i = 1; i < m; i++) dp[i][0] = dp[i-1][0] + grid[i][0];
        
        //动态规划
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                //转移方程
                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j];
            }
        }
        
        return dp[m-1][n-1];
    }
};
