// Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]
// Output: 3
// Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).

class Solution {
public:
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        int size = envelopes.size();
        if (size == 1) return 1;
        
        // 对信封排序，默认的排序原则是只比较“长”，e.g {2,5} 排在 {3,3} 前面
        sort(envelopes.begin(), envelopes.end());
        
        // dp[i][0]表示不选用信封i的最大值，dp[i][1]表示选用信封i的最大值
        vector<vector<int>> dp(size, vector<int>(2, 0));
        
        dp[0][0] = 0;
        dp[0][1] = 1;
        
        
        for (int i = 1; i < size; i++) {
            // 更新dp[i][0]
            dp[i][0] = max(dp[i-1][0], dp[i-1][1]);
            
            // 更新dp[i][1]，至少有一种情况，前面什么都不选
            dp[i][1] = 1;
            
            for (int j = i-1; j >= 0; j--) {
                // 找到一个即使选了也能盖上去的
                // 不需要从dp[j][0]递推，存在k<j 使得dp[j][0] = dp[k][1]
                if ((envelopes[i][0] > envelopes[j][0]) && (envelopes[i][1] > envelopes[j][1])) {
                    dp[i][1] = max(dp[i][1], dp[j][1] + 1);
                }
            }
        }
        
        return max(dp[size-1][0], dp[size-1][1]);
    }
};
