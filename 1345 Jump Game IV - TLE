// Input: arr = [100,-23,-23,404,100,23,23,23,3,404]
// Output: 3
// Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.

class Solution {
public:
    int minJumps(vector<int>& arr) {
        int size = arr.size();
            
        // idx - next idx
        unordered_map<int, vector<int>> nextidxs;
        
        // value - idxs
        unordered_map<int, vector<int>> valuemap;
        
        for (int i = 0; i < size; i++) {
            if (i > 0) nextidxs[i].push_back(i - 1);
            if (i < size - 1) nextidxs[i].push_back(i + 1);
            
            valuemap[arr[i]].push_back(i);
        }
        
        for (auto iter : valuemap) {
            vector<int> idxs = iter.second;
            
            for (int i = 0; i < idxs.size(); i++) {
                for (int j = idxs.size() - 1; j >= 0; j--) {
                    if (i == j) continue;
                    if (idxs[j] == idxs[i] - 1 || idxs[j] == idxs[i] + 1) continue;
                    
                    nextidxs[idxs[i]].push_back(idxs[j]);
                }
            }
        }
        
        // BFS 广度优先搜索
        queue<int> queue;
        vector<bool> visited(size, false);
        int steps = 0;

        queue.push(0);
        visited[0] = true;
        
        while (!queue.empty()) {
            int cnt = queue.size();
            
            for (int i = 0; i < cnt; i++) {
                int curidx = queue.front();
                queue.pop();
                
                // 已经抵达终点
                if (curidx == size - 1) return steps;
                
                for (int nextidx : nextidxs[curidx]) {
                    if (visited[nextidx]) continue;
                    
                    queue.push(nextidx);
                    visited[nextidx] = true;
                }
            }
            
            steps++;
        }
        
        return steps;
    }
};
