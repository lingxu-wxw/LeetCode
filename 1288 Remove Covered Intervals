// Input: intervals = [[1,4],[3,6],[2,8]]
// Output: 2
// Explanation: Interval [3,6] is covered by [2,8], therefore it is removed.

class Solution {
public:
    
    struct cmp {
        bool operator()(const vector<int>& v1, const vector<int>& v2) {
            // 相等时end大的放前面
            return ((v1[0] < v2[0]) || (v1[0] == v2[0] && v1[1] >= v2[1]));
        }
    };
    
    int removeCoveredIntervals(vector<vector<int>>& intervals) {
        int size = intervals.size();
        if (size <= 1) return size;
        
        sort(intervals.begin(), intervals.end(), cmp());
        
        // current max interval end
        int maxRight = -1;
        int covered = 0;
        
        for (auto interval : intervals) {
            // 0 <= li <= ri <= 10^5
            if (maxRight == -1 || interval[1] > maxRight) {
                maxRight = interval[1];
            } else {
                covered++;
            }
        }
        
        return size - covered;
    }
};
