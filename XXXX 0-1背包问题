// 考虑如下定义的背包问题K(U, C)：设U={u(1), u(2),…, u(n)}是一个准备放入容量为C的背包中的n个物品的集合，
// 第i个物品u(i)具有体积s(i)和价值v(i)，要求从这n个物品中挑选出一部分装入背包，
// 在不超过背包容量的前提下使背包中物品的价值最大。这里C, s(i)和v(i)都为正整数，且所有的s(i)都不大于C。

// 动态规划求解:
// 设v[i,j]表示从前i项物品中取出的装入容量为j的背包的物品的最大价值，i和j都为整数，且0<=i<=n, 0<=j<=C：
// v[i][j]=0 (i=0 or j=0)
// v[i][j]=v[i-1][j] (i>0 and s(i)>j)
// v[i][j]=max{v[i-1,j], v[i-1,j-s_i]+v(i)} (i>0 and s(i)<=j )
// 显然v[n,C]就是我们需要得到的结果。

#include <iostream>
using namespace std;

int max(int num1, int num2) {
    return (num1 > num2) ? num1 : num2;
}

int knapsack(int n, int weight[], int value[], int C) {
    int dp[n+1][C+1];
    
    // 初始化
    for (int i = 0; i <= n; i++) {
        dp[i][0] = 0;
    }
    for (int j = 0; j <= C; j++) {
        dp[0][j] = 0;
    }

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= C; j++) {
            // 当前物体无论如何装不进去的情况
            if (weight[i-1] > j) {
                dp[i][j] = dp[i-1][j];
            }
            // 当前物体装得进去 
            else {
                dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i-1]] + value[i-1]);
            }
        }
    }

    return dp[n][C];
}

int main() {
    int C, n;
    cin >> C >> n;

    int weight[n], value[n];
    for (int i = 0; i < n; i++) {
        cin >> weight[i] >> value[i];
    }
  
    cout << knapsack(n, weight, value, C) << endl;

    return 0;
}
