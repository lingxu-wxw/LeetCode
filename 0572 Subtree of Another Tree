// Input: root = [3,4,5,1,2], subRoot = [4,1,2]
// Output: true

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    bool isSameTree(TreeNode* tree1, TreeNode* tree2) {
        if (!tree1 && !tree2) return true;
        if (!tree1 || !tree2) return false;
        if (tree1->val != tree2->val) return false;
        
        return isSameTree(tree1->left, tree2->left) && isSameTree(tree1->right, tree2->right);
    }
    
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if (!root && !subRoot) return true;
        if (!root || !subRoot) return false;
        
        // 层级遍历
        queue<TreeNode*> queue;
        queue.push(root);
        
        while (!queue.empty()) {
            int size = queue.size();
            
            for (int i = 0; i < size; i++) {
                TreeNode* node = queue.front(); queue.pop();
                
                // 判断是否是相同的树
                if (node->val == subRoot->val) {
                    if (isSameTree(node, subRoot)) {
                        return true;
                    }
                }
                
                if (node->left) {
                    queue.push(node->left);
                }
                if (node->right) {
                    queue.push(node->right);
                }
            } 
        }
        
        return false;
    }
};
