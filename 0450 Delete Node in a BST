// Input: root = [5,3,6,2,4,null,7], key = 3
// Output: [5,4,6,2,null,null,7]
// Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
// One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
// Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        
        // 递归遍历找到要删除的结点
        if (!root) {
            return NULL;
        }
        else if (root->val > key) {
            root->left = deleteNode(root->left, key);
        }
        else if (root->val < key) {
            root->right = deleteNode(root->right, key);
        }
        
        // 找到结点以后
        else {
            // 如果要删除的结点有一个孩子是缺失的
            if (!root->left || !root->right) {
                root = (root->left) ? root->left : root->right;
            }
            // 左右孩子都有
            else {
                TreeNode* cur = root->right;
                while (cur->left) {
                    cur = cur->left;
                }
                
                // 把右子树中的最小值提上来，然后在右子树里把cur删掉
                root->val = cur->val;
                root->right = deleteNode(root->right, cur->val);
            }
        }
        
        return root;
    }
};
