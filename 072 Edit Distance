class Solution {
public:
    
    // Input: word1 = "horse", word2 = "ros"
    // Output: 3
    // Explanation: 
    // horse -> rorse (replace 'h' with 'r')
    // rorse -> rose (remove 'r')
    // rose -> ros (remove 'e')
    
    int minDistance(string word1, string word2) {
        // 动态规划: dp[i][j]表示从word1的前i个字符转换到word2的前j个字符所需要的步骤
        
        // 初值全都设为0, 边缘方便数组宽了一点
        int s1 = word1.length(), s2 = word2.length();
        vector<vector<int> > dp(s1+1, vector<int>(s2+1, 0));
        
        // 有一个word为空
        for (int i = 0; i <= s1; i++) dp[i][0] = i;
        for (int j = 0; j <= s2; j++) dp[0][j] = j;
        
        // 动态规划
        for (int i = 1; i <= s1; i++) {
            for (int j = 1; j <= s2; j++) {
                // 新添加的字符相等
                if (word1[i-1] == word2[j-1]) {
                    dp[i][j] = dp[i-1][j-1];
                }
                // 不相等的话edit distance肯定要+1, 依次是word1到word2的改, 删, 增
                else {
                    dp[i][j] = min(dp[i-1][j-1], min(dp[i-1][j], dp[i][j-1])) + 1;
                }
            }
        }
        
        return dp[s1][s2];
    }
};
