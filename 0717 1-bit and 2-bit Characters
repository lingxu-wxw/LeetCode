// Input: bits = [1,0,0]
// Output: true
// Explanation: The only way to decode it is two-bit character and one-bit character.
// So the last character is one-bit character.

// The first character can be represented by one bit 0.
// The second character can be represented by two bits (10 or 11).

class Solution {
public:
    bool isOneBitCharacter(vector<int>& bits) {
        int size = bits.size();
        int start = 0, laststart;
        
        while (start < size) {
            laststart = start;
            
            if (bits[start] == 0) {
                start += 1;
            } else {
                start += 2;
            }
        }
        
        return (laststart == size - 1);
    }
};
