class Solution {
public:
    
    // Return 0 if there is no such transformation sequence.
    // All words have the same length.
    // All words contain only lowercase alphabetic characters.
    // You may assume no duplicates in the word list.
    // You may assume beginWord and endWord are non-empty and are not the same.
    
    // Input:
    // beginWord = "hit",
    // endWord = "cog",
    // wordList = ["hot","dot","dog","lot","log","cog"]

    // Output: 5
    
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        
        if (beginWord == endWord) return 0;
        
        // dict是单词集
        unordered_set<string> dict(wordList.begin(), wordList.end());
        
        // 已遍历结点集q
        queue<string> q{{beginWord}};
        dict.erase(beginWord);
        
        // level记录循环中当前遍历的深度
        int level = 0;
        
        // BFS遍历
        while (!q.empty()) 
        {
            // 遍历在队列q中的整个结点集, 遍历q的时候一定要把size保留
            int size = q.size();
            for (int k = 0; k < size; k++) {
                // 取出结点集的最后一个词
                auto word = q.front(); q.pop();
                if (word == endWord) return level+1;

                // 对每个字母进行替换并在字典中查找是否存在替换后的新词
                for (int i = 0; i < word.size(); i++) {
                    string newWord = word;
                    for (char ch = 'a'; ch <= 'z'; ch++) {
                        newWord[i] = ch;
                        
                        // 不会有相同的，因为word已经从dict中删掉了
                        if (!dict.count(newWord)) continue;

                        // 如果替换后的新词在字典中存在，就加入到q中，并从dict中把它删去
                        q.push(newWord);
                        dict.erase(newWord);
                    }
                }
            }
            
            // 每一层队列遍历level都会加一
            level++;
        }
        
        return 0;
    }
};
