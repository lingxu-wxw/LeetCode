// Input: words = ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]
// Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]
// Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
// "dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
// "ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".

class TrieNode {
public:
    // 每个结点都是一个26叉树
    TrieNode* child[26];
    bool isWord;
    
    // new新的结点时将child全都置为NULL
    TrieNode() : isWord(false) {
        for (auto &p : child) {
            p = NULL;
        }
    }
};

class Solution {
private:
    TrieNode* root;
    
public:
    struct cmp {
        bool operator()(const string& s1, const string& s2) {
            return s1.length() < s2.length();
        }  
    };
    
    void insert(string word) {
        TrieNode* p = root;
        
        for (auto &s : word) {
            // 获取当前字母序
            int i = s - 'a';
            if (!p->child[i]) {
                // TrieNode和NULL区分是否存在结点
                p->child[i] = new TrieNode();
            }
            p = p->child[i];
        }
        
        p->isWord = true;
    }
    
    bool searchdfs(string word, int start, vector<bool>& visited) {
        if (start == word.length()) {
            return true;
        }
        if (visited[start]) {
            return false;
        }
        
        visited[start] = true;
        TrieNode* p = root;
        
        for (int idx = start; idx < word.length(); idx++) {
            // 获取当前字母序
            int i = word[idx] - 'a';
            if (!p->child[i]) {
                return false;
            }
            p = p->child[i];
            
            // 如果当前找到一个单词，并且之后也能被被单词拼接成
            if (p->isWord && searchdfs(word, idx + 1, visited)) {
                return true;
            }
        }
        
        return false;
    }
    
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        int size = words.size();
        root = new TrieNode();
        
        sort(words.begin(), words.end(), cmp());
        vector<string> res;
        
        for (auto word : words) {
            if (word.length() == 0) continue;
                
            vector<bool> visited(size, false);
            if (searchdfs(word, 0, visited)) {
                res.push_back(word);
            } else {
                insert(word);
            }
        }
        
        return res;
    }
};

