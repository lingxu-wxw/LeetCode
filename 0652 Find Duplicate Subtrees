// Input: root = [1,2,3,4,null,2,4,null,null,4]
// Output: [[2,4],[4]]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    string postorder(TreeNode* node, unordered_map<string, int>& map, vector<TreeNode*>& res) {
        if (node == NULL) {
            return "#"; 
        }
        
        string serialstr = to_string(node->val) + "(" + postorder(node->left, map, res) + "," + postorder(node->right, map, res) + ")";
        
        // 防止重复输出，多个相同的subtree输出一个就够了
        if (map.count(serialstr) && map[serialstr] == 1) {
            res.push_back(node);
        }
        map[serialstr]++;
        
        return serialstr;
    }
    
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        unordered_map<string, int> map;
        vector<TreeNode*> res;
        postorder(root, map, res);
        return res;
    }
};
