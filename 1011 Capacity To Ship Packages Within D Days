// Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5
// Output: 15
// Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
// 1st day: 1, 2, 3, 4, 5
// 2nd day: 6, 7
// 3rd day: 8
// 4th day: 9
// 5th day: 10

// Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.

class Solution {
public:
    
    // 参考0410 Split Array Largest Sum的思路
    
    bool canShipInDays(vector<int>& weights, int capacity, int days) {
        int size = weights.size();
        
        int curweight = 0, daycnt = 1;
        for (int i = 0; i < size; i++) {
            curweight += weights[i];
            
            if (curweight > capacity) {
                daycnt++;
                curweight = weights[i];
            }
        }
        
        return (daycnt <= days);
    }
    
    int shipWithinDays(vector<int>& weights, int days) {
        int size = weights.size();
        
        // 二分搜索一个合适的每天的容量
        int left = 0, right = 0;
        for (int i = 0; i < size; i++) {
            left = max(left, weights[i]);
            right += weights[i];
        }
        
        while (left < right) {
            int mid = (left + right) / 2;
            
            // 按照当前的capacity，days天是能运完的，capacity可以尝试小一点，但需保留mid这个可行解
            if (canShipInDays(weights, mid, days)) {
                right = mid;
            }
            // 按照当前的capacity，days天运不完，必须加capacity
            else {
                left = mid + 1;
            }
        }
        
        return right;
    }
};
