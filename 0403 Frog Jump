// Input: stones = [0,1,3,5,6,8,12,17]
// Output: true
// Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th // stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.

class Solution {
public:
    
    bool canCrossDFS(vector<int>& stones, int curidx, int lastjump, unordered_map<int, unordered_map<int, bool>>& map) {
        int size = stones.size();
        
        // 跳到终点，返回true
        if (curidx == size-1) {
            return true;
        }
        
        // 剪枝，如果map中有结果可以直接返回
        if (map.count(curidx) && map[curidx].count(lastjump)) {
            return map[curidx][lastjump];
        }
    
        int curstone = stones[curidx];
        
        bool canjump = false;
        
        for (int i = curidx+1; i < size; i++) {
            // 找到能跳下一步的了，继续递归
            if (stones[i] >= curstone+lastjump-1 && stones[i] <= curstone+lastjump+1) {
                if (canCrossDFS(stones, i, stones[i]-curstone, map)) {
                    canjump = true;
                }
            }
            
            // 太近了跳不了
            else if (stones[i] < curstone+lastjump-1) {
                continue;
            }
            // 太远了跳不了
            else if (stones[i] > curstone+lastjump+1) {
                break;
            }
        }
        
        // 根据结果更新map
        map[curidx][lastjump] = canjump;
        return canjump;
    }
    
    bool canCross(vector<int>& stones) {
        // stones[0] == 0, 2 <= stones.length <= 2000
        if (stones[1] != 1) return false;
        
        // curidx, lastjump -> can/can not
        unordered_map<int, unordered_map<int, bool>> map;
        
        return canCrossDFS(stones, 1, 1, map);
    }
};
