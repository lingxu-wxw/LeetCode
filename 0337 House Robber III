// Input: [3,2,3,null,3,null,1]
//     3
//    / \
//   2   3
//    \   \ 
//     3   1

// Output: 7 
// Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int robDFS(TreeNode* root, unordered_map<TreeNode*, int>& map) {
        if (!root) return 0;
        if (map.count(root)) return map[root];
        
        int valWoLeft = 0, valWoRight = 0;
        int val = 0;
        
        // 不包含左子结点的最大值
        if (root->left) {
            valWoLeft = robDFS(root->left->left, map) + robDFS(root->left->right, map);
        } 
        // 不包含右子结点的最大值
        if (root->right) {
            valWoRight = robDFS(root->right->left, map) + robDFS(root->right->right, map);
        }
        
        val = max(valWoLeft + valWoRight + root->val, robDFS(root->left, map) + robDFS(root->right, map));
        map[root] = val;
        
        return val;
    }
    
    int rob(TreeNode* root) {
        // 记录如果抢了当前treenode结点的最大收益
        unordered_map<TreeNode*, int> map;
        return robDFS(root, map);
    }
};
