// Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
// Output: 2
// Explanation: We have the following two paths: 
// 1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
// 2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)

class Solution {
public:
    
    // 1 <= m * n <= 20，可以用int来作为visit
    
    // 方向：上下左右 
    vector<vector<int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    
    void uniquePathsIIIDFS(vector<vector<int>>& grid, int position, int visit, int remain, int& res) {
        int height = grid.size();
        int width = grid[0].size();
        
        int i = position / width;
        int j = position % width;
        
        visit |= (1 << position);
        remain--;
        
        // 全部访问过并找到终点所在地
        if (remain == 0 && grid[i][j] == 2) {
            res++;
            return;
        }
        
        for (auto dir : directions) {
            int newi = i + dir[0];
            int newj = j + dir[1];
            int newpos = newi * width + newj;
            
            // 越界，墙壁，已经访问过
            if (newi < 0 || newi >= height || newj < 0 || newj >= width || grid[newi][newj] == -1 || (visit & (1 << newpos)))  {
                continue;
            }
            
            uniquePathsIIIDFS(grid, newpos, visit, remain, res);
        }
    }
    
    int uniquePathsIII(vector<vector<int>>& grid) {
        int height = grid.size();
        int width = grid[0].size();
        
        int starti = 0, startj = 0;
        int remain = height * width;
        int res = 0;
        
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                // 找到出发点
                if (grid[i][j] == 1) {
                    starti = i;
                    startj = j;
                }
                // 如果有墙壁，最终要遍历到的格子就要少一个
                else if (grid[i][j] == -1) {
                    remain--;
                }
            }
        }
        
        uniquePathsIIIDFS(grid, starti * width + startj, 0, remain, res);
        
        return res;
    }
};
