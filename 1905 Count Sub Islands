// Input: grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]
// Output: 3
// Explanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.
// The 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands.

class Solution {
public:
    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        int height = grid1.size();
        int width = grid1[0].size();
        
        vector<vector<int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        // 将grid1中为0 grid2中为1的点置为0，体现sub island
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                if (grid1[i][j] == 0 && grid2[i][j] == 1) {
                    grid2[i][j] = 0;
                    
                    // BFS遍历同属的整个岛屿，全部置为0
                    queue<int> queue;
                    queue.push(i*width + j);
                    
                    while (!queue.empty()) {
                        int nodeidx = queue.front();
                        queue.pop();
                        
                        for (auto dir : directions) {
                            int newi = (nodeidx / width) + dir[0];
                            int newj = (nodeidx % width) + dir[1];

                            if (newi < 0 || newi >= height || newj < 0 || newj >= width) continue;
                            if (grid2[newi][newj] == 0) continue;

                            grid2[newi][newj] = 0;
                            queue.push(newi*width + newj);
                        }
                    }
                }
            }
        }
        
        // BFS遍历grid中的岛屿个数
        vector<bool> visited(height*width, false);
        int subislands = 0;
        
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                if (grid2[i][j] == 0 || visited[i*width + j]) continue;
                
                queue<int> queue;
                queue.push(i*width + j);
                visited[i*width + j] = true;
                subislands++;
                
                while (!queue.empty()) {
                    int nodeidx = queue.front();
                    queue.pop();
                    
                    for (auto dir : directions) {
                        int newi = (nodeidx / width) + dir[0];
                        int newj = (nodeidx % width) + dir[1];
                        
                        if (newi < 0 || newi >= height || newj < 0 || newj >= width) continue;
                        if (grid2[newi][newj] == 0 || visited[newi*width + newj]) continue;
                        
                        queue.push(newi*width + newj);
                        visited[newi*width + newj] = true;
                    }
                }
            }
        }
        
        return subislands;
    }
};
