// Given nums = [1, 3, 5]
// sumRange(0, 2) -> 9
// update(1, 2)
// sumRange(0, 2) -> 8

// 树状数组Binary Indexed Tree
//               8
//       4       8
//   2   4   6   8
// 1 2 3 4 5 6 7 8

// j&-j, 找到最末尾的一个1的位置

// 参考链接：https://www.cnblogs.com/grandyang/p/4985506.html

class NumArray {
private:
    vector<int> data, bit;
    
public:
    NumArray(vector<int>& nums) {
        data.resize(nums.size());
        bit.resize(nums.size() + 1);
        for (int i = 0; i < nums.size(); ++i) {
            update(i, nums[i]);
        }
    }
    
    void update(int i, int val) {
        int diff = val - data[i];
        for (int j = i + 1; j < bit.size(); j += (j&-j)) {
            bit[j] += diff;
        }
        data[i] = val;
    }
    
    int sumRange(int i, int j) {
        return getSum(j + 1) - getSum(i);
    }    

    int getSum(int i) {
        int res = 0;
        for (int j = i; j > 0; j -= (j&-j)) {
            res += bit[j];
        }
        return res;
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(i,val);
 * int param_2 = obj->sumRange(i,j);
 */
