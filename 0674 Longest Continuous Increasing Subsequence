// Input: nums = [1,3,5,4,7]
// Output: 3
// Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
// Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element 4.

class Solution {
public:
    int findLengthOfLCIS(vector<int>& nums) {
        int size = nums.size();
        if (size == 1) return 1;
        
        int len = 1;
        int maxlen = 0;
        
        for (int i = 1; i < size; i++) {
            if (nums[i] > nums[i-1]) {
                len++;
                if (i == size - 1) {
                    maxlen = max(maxlen, len);
                }
            } 
            else {
                maxlen = max(maxlen, len);
                len = 1;
            }
        }
        
        return maxlen;
    }
};
