// 给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。
// '.' 匹配任意单个字符
// '*' 匹配零个或多个前面的那一个元素
// 所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。

class Solution {
public:

    bool match(string& s, string& p, int i, int j) {
        if (i == 0) return false;
        if (p[j-1] == '.') return true;

        return s[i-1] == p[j-1];
    }

    bool isMatch(string s, string p) {
        int lens = s.length();
        int lenp = p.length();

        vector<vector<int>> dp(lens + 1, vector<int>(lenp + 1, false));
        dp[0][0] = 1;

        for (int i = 0; i <= lens; i++) {
            for (int j = 1; j <= lenp; j++) {
                // '*'不会出现在第一个
                if (p[j-1] == '*') {
                    dp[i][j] |= dp[i][j-2];
                    if (match(s, p, i, j-1)) {
                        dp[i][j] |= dp[i-1][j];
                    }
                }
                else {
                    if (match(s, p, i, j)) {
                        dp[i][j] |= dp[i-1][j-1];
                    }
                }
            }
        }

        return dp[lens][lenp];
    }
};
