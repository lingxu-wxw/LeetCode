// Input: nums = [1,5,11,5]
// Output: true
// Explanation: The array can be partitioned as [1, 5, 5] and [11].

class Solution {
public:
    
    bool canPartition(vector<int>& nums) {
        int size = nums.size();
        if (size == 1) {
            return false;
        }
        
        // 求和同时筛选
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (sum % 2 != 0) {
            return false;
        }
        
        // 在vector中判断是否有subset和为sum
        // 遍历到第i个idx，是否有可能取到subsum为j
        // 长度设为sum+1是防止越界
        vector<vector<bool> > dp(size, vector<bool>(sum+1, false));
    
        dp[0][nums[0]] = true;
        for (int i = 0; i < size; i++) {
            dp[i][0] = true;
        }
        
        for (int i = 1; i < size; i++) {
            for (int j = 1; j <= sum/2; j++) {
                // 不取进subsum
                dp[i][j] = dp[i-1][j];
                // 取进subsum
                if (nums[i] <= j) {
                    dp[i][j] = (dp[i][j] || dp[i-1][j-nums[i]]);
                }
            }
        }
        
        return dp[size-1][sum/2];
    }
};
