// Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
// Output: [3,3,5,5,6,7]
// Explanation: 
// Window position                Max
// ---------------               -----
// [1  3  -1] -3  5  3  6  7       3
//  1 [3  -1  -3] 5  3  6  7       3
//  1  3 [-1  -3  5] 3  6  7       5
//  1  3  -1 [-3  5  3] 6  7       5
//  1  3  -1  -3 [5  3  6] 7       6
//  1  3  -1  -3  5 [3  6  7]      7

class Solution {
public:
    
    // deque容器: 线性复杂度，像vector一样快速随机访问任何一个元素，像queue一样能够高效地插入和删除容器的头部尾部元素，也叫双端队列
    // void push_front(const T& x):双端队列头部增加一个元素X
    // void push_back(const T& x):双端队列尾部增加一个元素x
    // void pop_front():删除双端队列中最前一个元素
    // void pop_back():删除双端队列中最后一个元素
    // reference at(int pos):返回pos位置元素的引用
    // reference front():返回首元素的引用
    // reference back():返回尾元素的引用
    
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        
        int size = nums.size();
        
        // 仅在双端队列中存可能有用的数的下标
        deque<int> queue;
        vector<int> res;
        
        for (int i = 0; i < size; i++) {
            // 删除掉出slide window的数
            if (!queue.empty() && queue.front() == i-k) {
                queue.pop_front();
            }
            
            // 删除不可能有用的数字：在deque中但下标比i小且值比nums[i]小 
            // -> 最前面front()的是当前最大的数，依次是可能用上的数（数量不恒定）
            while (!queue.empty() && nums[queue.back()] < nums[i]) {
                queue.pop_back();
            }
            
            queue.push_back(i);
            
            // 返回multiset最右端的数，即当前slide window的最大值
            if (i >= k-1) {
                res.push_back(nums[queue.front()]);
            }
        }
        
        return res;
    }
};
