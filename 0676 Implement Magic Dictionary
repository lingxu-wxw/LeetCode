// Input
// ["MagicDictionary", "buildDict", "search", "search", "search", "search"]
// [[], [["hello", "leetcode"]], ["hello"], ["hhllo"], ["hell"], ["leetcoded"]]
// Output
// [null, null, false, true, false, false]

// Explanation
// MagicDictionary magicDictionary = new MagicDictionary();
// magicDictionary.buildDict(["hello", "leetcode"]);
// magicDictionary.search("hello"); // return False
// magicDictionary.search("hhllo"); // We can change the second 'h' to 'e' to match "hello" so we return True
// magicDictionary.search("hell"); // return False
// magicDictionary.search("leetcoded"); // return False

class MagicDictionary {
private:
    unordered_map<int, vector<string>> map;
    
public:
    MagicDictionary() {
        
    }
    
    void buildDict(vector<string> dictionary) {
        for (string word : dictionary) {
            int len = word.length();
            map[len].push_back(word);
        }
    }
    
    bool search(string searchWord) {
        int len = searchWord.length();
        if (!map.count(len)) return false;
        
        for (string word : map[len]) {
            int diff = 0;
            
            for (int i = 0; i < len; i++) {
                if (searchWord[i] != word[i]) {
                    diff++;
                    if (diff > 1) {
                        break;
                    }
                }
            }
            
            if (diff == 1) {
                return true;
            }
        }
        
        return false;
    }
};

/**
 * Your MagicDictionary object will be instantiated and called as such:
 * MagicDictionary* obj = new MagicDictionary();
 * obj->buildDict(dictionary);
 * bool param_2 = obj->search(searchWord);
 */
