#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void countPool(vector<vector<int>>& pool, vector<vector<bool>>& visited, int i, int j) {
	int height = pool.size(), width = pool[0].size();

	if (i < 0 || i >= height || j < 0 || j >= width || visited[i][j]) return;

	visited[i][j] = true;
	if (pool[i][j] != 0) return;

	countPool(pool, visited, i + 1, j);
	countPool(pool, visited, i - 1, j);
	countPool(pool, visited, i, j + 1);
	countPool(pool, visited, i, j - 1);
}

int main() {

	// Console input: height, width
	int height, width;
	cin >> height;
	cin >> width;

	// Console input: pool
	vector<vector<int>> pool(height, vector<int>(width, 0));

	for (int i = 0; i < height; i++) {
		for (int j = 0; j < width; j++) {
			cin >> pool[i][j];
		}
	}


	// Traverse: count pool
	vector<vector<bool>> visited(height, vector<bool>(width, false));
	int cnt = 0;

	for (int i = 0; i < height; i++) {
		for (int j = 0; j < width; j++) {
			if (visited[i][j]) continue;

			if (pool[i][j] == 0) {
				cnt++;
				countPool(pool, visited, i, j);
			}
		}
	}

	cout << cnt << endl;

	return 0;
}
