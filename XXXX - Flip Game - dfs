#include <iostream>
using namespace std;

int n = 5;
int light[5][5];
int direction[5][2] = { {-1,0}, {1,0}, {0,-1}, {0,1}, {0,0} };
bool hasfound = false;

bool allLightOn() {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (light[i][j] == 0) {
				return false;
			}
		}
	}
	return true;
}

void press(int i, int j) {
	for (int dir = 0; dir < 5; dir++) {
		int newi = i + direction[dir][0];
		int newj = j + direction[dir][1];

		if (newi < 0 || newi >= n || newj < 0 || newj >= n) continue;

		light[newi][newj] = (light[newi][newj] == 0) ? 1 : 0;
	}
}

void dfs(int i, int j, int curstep, int step) {
	if (curstep == step) {
		hasfound = allLightOn();
		return;
	}
	if (hasfound || i == n) {
		return;
	}

	press(i, j);
	if (j < n - 1) {
		dfs(i, j + 1, curstep + 1, step);
	}
	else {
		dfs(i + 1, 0, curstep + 1, step);
	}

	press(i, j);
	if (j < n - 1) {
		dfs(i, j + 1, curstep, step);
	}
	else {
		dfs(i + 1, 0, curstep, step);
	}
}

int main()
{
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> light[i][j];
		}
	}

	int step = 0;

	for (step = 0; step <= n * n; step++) {
		dfs(0, 0, 0, step);
		if (hasfound) {
			break;
		}
	}

	if (hasfound) {
		cout << step;
	}
	else {
		cout << -1;
	}

	return 0;
}
