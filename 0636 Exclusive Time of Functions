// Input: n = 2, logs = ["0:start:0","0:start:2","0:end:5","1:start:6","1:end:6","0:end:7"]
// Output: [7,1]
// Explanation:
// Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.
// Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.
// Function 0 (initial call) resumes execution then immediately calls function 1.
// Function 1 starts at the beginning of time 6, executes 1 units of time, and ends at the end of time 6.
// Function 0 resumes execution at the beginning of time 6 and executes for 2 units of time.
// So function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.

class Solution {
public:
    vector<int> exclusiveTime(int n, vector<string>& logs) {
        // stack中存的是task id
        stack<int> stack;
        
        vector<int> res(n, 0);
        
        int taskid, time;
        char type[10];
        int pretime = 0;
        
        for (string log : logs) {
            sscanf(log.c_str(), "%d:%[^:]:%d", &taskid, type, &time);
            
            if (type[0] == 's') {
                if (!stack.empty()) {
                    res[stack.top()] += (time - pretime);
                } 
                stack.push(taskid);
            }
            else {
                time++;
                res[stack.top()] += (time - pretime);
                stack.pop();
            }
            
            pretime = time;
        }
        
        return res;
    }
};
