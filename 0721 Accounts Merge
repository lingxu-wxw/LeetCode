// Input: accounts = [["John","johnsmith@mail.com","john_newyork@mail.com"],["John","johnsmith@mail.com","john00@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]
// Output: [["John","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]

// Explanation:
// The first and second John's are the same person as they have the common email "johnsmith@mail.com".
// The third John and Mary are different people as none of their email addresses are used by other accounts.
// We could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], 
// ['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.

class Solution {
public:
    
    // 找到email的主邮箱
    string findroot(string email, unordered_map<string, string>& root) {
        return (root[email] == email) ? email : (findroot(root[email], root));
    }
    
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {    
        // email的用户名和主邮箱(自定义的)
        unordered_map<string, string> owner;
        unordered_map<string, string> root;
        
        // 主邮箱的邻接表，set自带排序
        unordered_map<string, set<string>> map;
        
        vector<vector<string>> res;
        
        // 初始化username表，先将所有email的root设为自己
        for (auto account : accounts) {
            for (int i = 0; i < account.size(); i++) {
                owner[account[i]] = account[0];
                root[account[i]] = account[i];
            }
        }
        
        // 将每个account的第一个邮箱的主邮箱定义为主邮箱
        for (auto account : accounts) {
            string rootemail = findroot(account[1], root);
            
            for (int i = 2; i < account.size(); i++) {
                root[findroot(account[i], root)] = rootemail;
            }
        }
        
        // 初始化map表，即主邮箱的邻接表，set自带排序
        for (auto account : accounts) {
            for (int i = 1; i < account.size(); i++) {
                map[findroot(account[i], root)].insert(account[i]);
            }
        }
        
        // 输出结果
        for (auto iter : map) {
            // set强转vector
            vector<string> vec(iter.second.begin(), iter.second.end());
            // 添加用户名
            vec.insert(vec.begin(), owner[iter.first]);
            
            res.push_back(vec);
        }
        
        return res;
    }
};
