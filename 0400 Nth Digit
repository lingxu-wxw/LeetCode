// Input: n = 11
// Output: 0
// Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.

class Solution {
public:
    int findNthDigit(int n) {
        
        long long level = 1, levelcnt = 1;    // 数字位数
        long long lastcnt = 0, curcnt = 9;    // 数字个数
        
        while (curcnt < n) {
            level *= 10;
            levelcnt++;
            lastcnt = curcnt; 
            curcnt += 9*level*levelcnt;
        }
        
        // 第n位数的数字
        long long num = level + (n-lastcnt-1) / levelcnt;    
        // 结果是 第n位数的数字的第digit位，从左往右数，从0开始
        long long digit = (n-lastcnt-1) % levelcnt;
        
        int res;
        
        while (digit >= 0) {
            res = num / level;
            num = num % level;
            level = level / 10;
            digit--;
        }
        
        return res;
    }
};

// 9个个位，90个十位，900个百位
// n = 200
// 9*1 + 90*2 + 900*3, 9*1 + 90*2 = 189
// 200-189 = 11, (11-1) / 3 = 3, (11-1) % 3 = 1
// num = 100+3 = 103, digit = 1

// 190-192 - 100
// 193-195 - 101
// 196-198 - 102
// 199-201 - 103
 
