// Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
// Only numbers 1 through 9 are used.
// Each number is used at most once.

class Solution {
public:
    
    void combinationSum3DFS(int start, int k, int target, vector<int> cur, vector<vector<int>> &res) {
        // 从1~9中从start后面的数字中，挑k个数字组成target
        if (target < 0 || k < 0) {
            return;
        }
        
        if (target == 0 && k == 0) {
            res.push_back(cur);
            return;
        }
        
        for (int i = start; i <= 9; i++) {
            cur.push_back(i);
            combinationSum3DFS(i+1, k-1, target-i, cur, res);
            cur.pop_back();
        }
    }
    
    vector<vector<int>> combinationSum3(int k, int n) {
        // n是target数，k是每个result中的数的个数，可选数字都是1~9
        vector<vector<int>> res;
        
        combinationSum3DFS(1, k, n, {}, res);
        
        return res;
    }
};
