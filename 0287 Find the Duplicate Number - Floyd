// Input: nums = [1,3,4,2,2]
// Output: 2

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        // Floyd 判圈算法
        // 第一次遍历相遇说明有环
        // 第二次遍历相遇的点即为环的入口
        
        // nums 1 3 4 2 2 
        // idxs 0 1 2 3 4
        // 0 - 1 - 3 - 2 - 4 - 2 - 4 - 2 - 4 - 2 - 4 - 2 - 4
        // 0 - 1 - 3 - 2 - 4(slow) - 2 - 4 - 2 - 4(fast) - 2 - 4 - 2 - 4
        // 0 - 1 - 3 - 2(slow) - 4 - 2 - 4 - 2 - 4 - 2 - 4 - 2(fast) - 4
        
        int slow = 0, fast = 0;
        do {
            slow = nums[slow];
            fast = nums[nums[fast]];
        } while (slow != fast);
        
        slow = 0;
        while (slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }
        
        return slow;
    }
};
