// Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
// Output: true
// Explanation: We might do the following sequence:
// push(1), push(2), push(3), push(4),
// pop() -> 4,
// push(5),
// pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

class Solution {
public:
    bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
        // All the elements of pushed are unique.
        // popped is a permutation of pushed.
        
        int size = pushed.size();
        if (popped.size() != size) return false;
        
        stack<int> st;
        int popidx = 0;
        
        for (int i = 0; i < size; i++) {
            st.push(pushed[i]);
            while (!st.empty() && st.top() == popped[popidx]) {
                st.pop();
                popidx++;
            }
        }
        
        return st.empty();
    }
};
