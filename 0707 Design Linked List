// Input
// ["MyLinkedList", "addAtHead", "addAtTail", "addAtIndex", "get", "deleteAtIndex", "get"]
// [[], [1], [3], [1, 2], [1], [1], [1]]
// Output
// [null, null, null, null, 2, null, 3]

// Explanation
// MyLinkedList myLinkedList = new MyLinkedList();
// myLinkedList.addAtHead(1);
// myLinkedList.addAtTail(3);
// myLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3
// myLinkedList.get(1);              // return 2
// myLinkedList.deleteAtIndex(1);    // now the linked list is 1->3
// myLinkedList.get(1);              // return 3

struct Node {
    int val;
    Node *next;
    Node() : val(0), next(nullptr) {}
    Node(int v) : val(v), next(nullptr) {}
    Node(int v, Node *next) : val(v), next(next) {}
};

class MyLinkedList {
private:
    Node* head;
    int size;
    
public:
    MyLinkedList() {
        head = new Node(-1);
        size = 0;
    }
    
    int get(int index) {
        if (index < 0 || index >= size) return -1;
        
        Node* cur = head->next;
        for (int i = 0; i < index; i++) {
            cur = cur->next;
        }
        
        return cur->val;
    }
    
    void addAtHead(int val) {
        Node* node = new Node(val);
        
        node->next = head->next;
        head->next = node;
        size++;
    }
    
    void addAtTail(int val) {
        Node* node = new Node(val);
        
        Node* pre = head;
        while (pre->next) {
            pre = pre->next;
        }
        
        pre->next = node;
        size++;
    }
    
    // If index equals the length of the linked list, 
    // the node will be appended to the end of the linked list.
    void addAtIndex(int index, int val) {
        if (index < 0 || index > size) return;
        
        Node* node = new Node(val);
        
        Node* pre = head;
        for (int i = 0; i < index; i++) {
            pre = pre->next;
        }
        
        node->next = pre->next;
        pre->next = node;
        size++;
    }
    
    void deleteAtIndex(int index) {
        if (index < 0 || index >= size) return;
        
        Node* pre = head;
        Node* cur = head->next;
        for (int i = 0; i < index; i++) {
            pre = pre->next;
            cur = cur->next;
        }
        
        pre->next = cur->next;
        delete cur;
        size--;
    }
};

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList* obj = new MyLinkedList();
 * int param_1 = obj->get(index);
 * obj->addAtHead(val);
 * obj->addAtTail(val);
 * obj->addAtIndex(index,val);
 * obj->deleteAtIndex(index);
 */
