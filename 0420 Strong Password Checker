// A password is considered strong if the below conditions are all met:
//  It has at least 6 characters and at most 20 characters.
//  It contains at least one lowercase letter, at least one uppercase letter, and at least one digit.
//  It does not contain three repeating characters in a row (i.e., "...aaa..." is weak, but "...aa...a..." is strong, assuming other conditions are met).

// In one step, you can:
//  Insert one character to password,
//  Delete one character from password, or
//  Replace one character of password with another character.

class Solution {
public:
    
    int strongPasswordChecker(string password) {
        int len = password.length();
        int lower = 1, upper = 1, digit = 1;
        // 连续重复字符的数量
        vector<int> repeat;
        
        for (int i = 0; i < len; i++) {
            if (password[i] >= 'a' && password[i] <= 'z') lower = 0;
            if (password[i] >= 'A' && password[i] <= 'Z') upper = 0;
            if (password[i] >= '0' && password[i] <= '9') digit = 0;
            
            int start = i;
            while (i < len-1 && password[i] == password[i+1]) {
                i++;
            }
            if (i-start+1 >= 3) {
                repeat.push_back(i-start+1);
            }
        }
        
        // 小写字母，大写字母，数字 缺失的种类个数
        int missing = (lower + upper + digit);
        
        // 判定为strong直接返回
        if (len >= 6 && len <= 20 && missing == 0 && repeat.size() == 0) {
            return 0;
        }
        
        // 总操作步数
        int res = 0;
        
        // len < 6的情况，以insert为主，如果missing过多，可能还需要有replace
        // 能够同时处理连续重复字符：aaa -> aaBa12(3), aaaa -> aaBaa1(2), aaaaa -> aaBaa1(2)
        if (len < 6) {
            int lacklen = 6 - len;
            res += max(missing, lacklen);
        }
        else {
            // len > 20的情况，以delete为主，先尝试将所有连续重复字符串delete到3k+2，再将仍然overlen的字符delete掉
            // 3k+2的连续重复字符只需要k次replace就能解决重复，是最经济的解法
            int overlen = max(0, len - 20);
            
            // 无论如何overlen的字符都会被删掉的，会优先删连续重复字符
            res += overlen;
            
            int deletecnt = 0;
            
            // 将所有连续重复字符串delete到3k+2，如果不再overlen了就可以停了，后面用replace解决
            for (int i = 0; i < 3 && overlen > 0; i++) {
                // 遍历连续重复字符的个数
                for (int j = 0; j < repeat.size(); j++) {
                    if (repeat[j] < 3) continue;
                    
                    // 3k删1个，3k+1删两个，3k+2删3个，前提是删完了还overlen
                    if (repeat[j] % 3 == i) {
                        deletecnt = min(overlen, i+1); // 最小1，最大3
                        repeat[j] -= deletecnt;
                        overlen -= deletecnt;
                    }
                }
            }
            
            // 多余的overlen优先灌给连续重复字符消化，3k+2的连续重复字符通过k次replace解决重复
            int replacecnt = 0;
            for (int j = 0; j < repeat.size(); j++) {
                if (repeat[j] < 3) continue;
                
                // overlen还有余量，直接删废一个连续重复字符，只留两个
                // 如果没有连续重复字符可删，实际就会删其他字符，但计数已经在之前计过了
                if (overlen > 0) {
                    deletecnt = min(overlen, repeat[j] - 2);
                    repeat[j] -= deletecnt;
                    overlen -= deletecnt;
                }
                
                replacecnt += repeat[j] / 3;
            }
            
            // missing也是替换，一起考虑
            res += max(missing, replacecnt);
        }
        
        return res;
    }
};
