// Input: nums = [1,17,5,10,13,15,10,5,16,8]
// Output: 7
// Explanation: There are several subsequences that achieve this length.
// One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).

class Solution {
public:
    int wiggleMaxLength(vector<int>& nums) {
        int size = nums.size();
        
        // 动态规划, posi表示nums[i]和之前一个选入subsequence的元素的差值为则会那个
        vector<int> posi(size, 1);
        vector<int> nega(size, 1);
        
        for (int i = 1; i < size; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    posi[i] = max(posi[i], nega[j]+1);
                } else if (nums[i] < nums[j]) {
                    nega[i] = max(nega[i], posi[j]+1);
                }
                // 相等直接忽略
            }
        }
        
        return max(posi[size-1], nega[size-1]);
    }
};
