// Input: words = ["i","love","leetcode","i","love","coding"], k = 2
// Output: ["i","love"]
// Explanation: "i" and "love" are the two most frequent words.
// Note that "i" comes before "love" due to a lower alphabetical order.

class Solution {
public:
    
    struct cmp {
        bool operator()(const pair<string, int>& p1, const pair<string, int>& p2) {
            return ((p1.second > p2.second) || (p1.second == p2.second && p1.first < p2.first));
        }  
    };
    
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string, int> map;
        
        for (auto word : words) {
            map[word]++;
        }
        
        vector<pair<string, int>> vec(map.begin(), map.end());
        vector<string> res;
        
        sort(vec.begin(), vec.end(), cmp());
        
        for (int i = 0; i < k; i++) {
            res.push_back(vec[i].first);
        }
        
        return res;
    }
};
