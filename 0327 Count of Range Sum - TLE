// Input: nums = [-2,5,-1], lower = -2, upper = 2
// Output: 3
// Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.

class Solution {
public:
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        int size = nums.size();
        
        // dp[i][j]表示区间[i,j]的和
        // long 防止 corner case: [2147483647,-2147483648,-1,0], -1, 0
        vector<vector<long>> dp(size, vector<long>(size, 0));
        
        int res = 0;
        
        // 初始化对角线
        for (int i = 0; i < size; i++) {
            dp[i][i] = nums[i];
            
            if (dp[i][i] >= lower && dp[i][i] <= upper) {
                res++;
            }
        }
        
        // 转移方程，一条一条斜着更新
        for (int len = 1; len < size; len++) {
            for (int i = 0; i < size-len; i++) {
                int j = i + len;
                dp[i][j] = dp[i][j-1] + dp[i+1][j] - dp[i+1][j-1];
                
                if (dp[i][j] >= lower && dp[i][j] <= upper) {
                    res++;
                }
            }
        }
        
        return res;
    }
};
