// Input: points = [[0,0],[1,0],[2,0]]
// Output: 2
// Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].

class Solution {
public:
    
    // 计算距离（平方）
    int dist(vector<int>& A, vector<int>& B) {
        return (A[0] - B[0]) * (A[0] - B[0]) + (A[1] - B[1]) * (A[1] - B[1]);
    }
    
    
    int numberOfBoomerangs(vector<vector<int>>& points) {
        int size = points.size();
        
        int res = 0;
            
        // 以每个点都为中心算一次
        for (int i = 0; i < size; i++) { 
            // 距离的平方 - 出现的次数
            unordered_map<int, int> map;
            
            for (int j = 0; j < size; j++) {
                if (i == j) continue;
                int distance = dist(points[i], points[j]);    
                map[distance]++;
            }
            
            // 以i为中心点，如果有n条相同长度的边，则能组合出n(n-1)种情况
            for (auto iter : map) {
                res += (iter.second) * (iter.second - 1);
            }
        }
        
        return res;
    }
};
