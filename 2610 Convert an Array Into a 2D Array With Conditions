// Input: nums = [1,3,4,1,2,3,1]
// Output: [[1,3,4,2],[1,3],[1]]
// Explanation: We can create a 2D array that contains the following rows:
// - 1,3,4,2
// - 1,3
// - 1
// All elements of nums were used, and each row of the 2D array contains distinct integers, so it is a valid answer.
// It can be shown that we cannot have less than 3 rows in a valid array.

class Solution {
public:
    vector<vector<int>> findMatrix(vector<int>& nums) {
        vector<vector<int>> matrix;
        unordered_map<int, int> frequency;  // num, count
        for (int& num : nums) {
            frequency[num]++;
        }

        // https://en.cppreference.com/w/cpp/container/unordered_map/erase
        while (!frequency.empty()) {
            vector<int> row;
            for (auto iter = frequency.begin(); iter != frequency.end();) {
                row.push_back(iter->first);
                iter->second--;
                if (iter->second == 0) {
                    iter = frequency.erase(iter);
                } else {
                    iter++;
                }
            }
            matrix.push_back(row);
        }

        return matrix;
    }
};
