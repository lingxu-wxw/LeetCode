// We are playing the Guessing Game. The game will work as follows:
// 1. I pick a number between 1 and n.
// 2. You guess a number.
// 3. If you guess the right number, you win the game.
// 4. If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.
// 5. Every time you guess a wrong number x, you will pay x dollars. If you run out of money, you lose the game.
// Given a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.

class Solution {
public:
    
    // return the minimum amount of money you need to guarantee a win regardless of what number I pick
    // 求最坏情况的最小值
    
    int getMoneyAmount(int n) {
        // 方便理解起见，dp[0][j]并不使用
        // dp[i][i] = 0
        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));
        
        for (int i = 2; i <= n; i++) {
            for (int j = i-1; j > 0; j--) {
                // 假设已经知道范围在 [j, i]（含两头），求最坏情况的最小金额
                // 假设在 [j, i] 中，下一次猜k（k!=j, k!=i）
                int global_min = INT_MAX;
                for (int k = j+1; k < i; k++) {
                    int local_max = k + max(dp[j][k-1], dp[k+1][i]);
                    global_min = min(global_min, local_max);
                }
                
                // 边界情况: 如果 j=i-1, 不会进上面的循环
                dp[j][i] = (j==i-1) ? j : global_min;
            }
        }
        
        return dp[1][n];
    }
};


