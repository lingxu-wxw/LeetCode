// Input
// ["LFUCache", "put", "put", "get", "put", "get", "get", "put", "get", "get", "get"]
// [[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]
// Output
// [null, null, null, 1, null, -1, 3, null, -1, 3, 4]

// Explanation
// cnt(x) = the use counter for key x
// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)
// LFUCache lfu = new LFUCache(2);
// lfu.put(1, 1);   // cache=[1,_], cnt(1)=1
// lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1
// lfu.get(1);      // return 1
                    // cache=[1,2], cnt(2)=1, cnt(1)=2
// lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.
                    // cache=[3,1], cnt(3)=1, cnt(1)=2
// lfu.get(2);      // return -1 (not found)
// lfu.get(3);      // return 3
                    // cache=[3,1], cnt(3)=2, cnt(1)=2
// lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.
                    // cache=[4,3], cnt(4)=1, cnt(3)=2
// lfu.get(1);      // return -1 (not found)
// lfu.get(3);      // return 3
                    // cache=[3,4], cnt(4)=1, cnt(3)=3
// lfu.get(4);      // return 4
                    // cache=[4,3], cnt(4)=2, cnt(3)=3

class Node {
public:
    int key;
    int value;
    int freq;
    Node* prev;
    Node* next;
    
    Node(int key, int value) {
        this->key = key;
        this->value = value;
        this->freq = 1;
        this->prev = NULL;
        this->next = NULL;
    }
};

class LFUCache {
private:
    unordered_map<int, Node*> map;  // key - node
    unordered_map<int, pair<Node*, Node*>> freq_list;   // freq - head/tail
    int min_freq;
    int capacity;
    
    void remove(Node* node) {
        // update prev/next of neighbors
        if (node->prev) {
            node->prev->next = node->next;
        }
        if (node->next) {
            node->next->prev = node->prev;
        }
        
        // update head/tail of freq_list
        if (freq_list[node->freq].first == node) {
            freq_list[node->freq].first = node->next;
        }
        if (freq_list[node->freq].second == node) {
            freq_list[node->freq].second = node->prev;
        }
    }
    
    void setHead(Node* node, int freq) {
        // origin head of freq_list(freq)
        Node* head = freq_list[freq].first;
        
        // update prev/next of neighbors and head/tail of freq_list
        if (!head) {
            // freq_list(freq) is empty
            freq_list[freq].first = node;
            freq_list[freq].second = node;
            node->prev = NULL;
            node->next = NULL;
        } else {
            node->prev = NULL;
            node->next = head;
            freq_list[freq].first = node;
            head->prev = node;
        }
    }
    
    void increaseFreq(Node* node) {
        // remove node from old freq_list
        remove(node);
        
        // update min_freq when node is the only element of min freq_list
        if (!freq_list[min_freq].first) {
            min_freq++;
        }
        
        // add frequence of node
        node->freq++;
        
        // add node to new freq_list
        setHead(node, node->freq);
    }
    
public:
    LFUCache(int capacity) {
        this->min_freq = 1;
        this->capacity = capacity;
    }
    
    int get(int key) {
        // key does not exist in the cache
        if (!map.count(key)) {
            return -1;
        }
        
        Node* node = map[key];
        increaseFreq(node);
        return node->value;
    }
    
    void put(int key, int value) {
        // key already exists in the cache
        if (map.count(key)) {
            Node* node = map[key];
            node->value = value;
            increaseFreq(node);
            return;
        }
        
        // create new node of key/value
        Node* newnode = new Node(key, value);
        map[key] = newnode;
        
        // add node to new freq_list(1)
        setHead(newnode, 1);
        
        // evict least frequence element if necessary
        if (map.size() > capacity) {
            Node* evictnode = freq_list[min_freq].second;
            remove(evictnode);
            map.erase(evictnode->key);
            delete evictnode;
        }
        
        // set min_freq to 1
        min_freq = 1;
    }
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
