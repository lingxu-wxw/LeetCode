// Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
// Output: 4
// Explanation: The largest subset with at most 5 0's and 3 1's is {"10", "0001", "1", "0"}, so the answer is 4.
// Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
// {"111001"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.

class Solution {
public:
    
    int findMaxForm(vector<string>& strs, int m, int n) {
        int size = strs.size();
        
        // i个0和j个1能够容纳的最多的cnt数量
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        
        for (string str : strs) {
            // 统计当前str的0/1数量
            int zeros = 0, ones = 0;
            for (char c : str) {
                if (c == '0') {
                    zeros++;
                } else if (c == '1') {
                    ones++;
                }
            }
            
            // 动态规划递推式
            for (int i = m; i >= zeros; i--) {
                for (int j = n; j >= ones; j--) {
                    dp[i][j] = max(dp[i][j], dp[i-zeros][j-ones] + 1);
                }
            }
        }
        
        return dp[m][n];
    }
};
