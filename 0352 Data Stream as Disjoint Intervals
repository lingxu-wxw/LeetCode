// Input
// ["SummaryRanges", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals"]
// [[], [1], [], [3], [], [7], [], [2], [], [6], []]
// Output
// [null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]

// Explanation
// SummaryRanges summaryRanges = new SummaryRanges();
// summaryRanges.addNum(1);      // arr = [1]
// summaryRanges.getIntervals(); // return [[1, 1]]
// summaryRanges.addNum(3);      // arr = [1, 3]
// summaryRanges.getIntervals(); // return [[1, 1], [3, 3]]
// summaryRanges.addNum(7);      // arr = [1, 3, 7]
// summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]
// summaryRanges.addNum(2);      // arr = [1, 2, 3, 7]
// summaryRanges.getIntervals(); // return [[1, 3], [7, 7]]
// summaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]
// summaryRanges.getIntervals(); // return [[1, 3], [6, 7]]

class SummaryRanges {
public:
    
    // 思路类似 0057 insert intervals
    
    /** Initialize your data structure here. */
    SummaryRanges() {
        // do nothing
    }
    
    void addNum(int val) {
        vector<int> newInterval = {val, val};
        
        // 加入新的interval后的区间
        vector<vector<int>> res;
        
        // newInterval最后插入的位置
        int index = 0;
        
        for (auto interval : intervals) {
            // newinterval在当前interval后面，无交叉
            if (interval[1] + 1 < newInterval[0]) {
                res.push_back(interval);
                index++;
            }
            
            // newinterval在当前interval前面，无交叉
            else if (interval[0] - 1 > newInterval[1]) {
                res.push_back(interval);
            }
            
            // 有交叉，合并
            else {
                newInterval[0] = min(newInterval[0], interval[0]);
                newInterval[1] = max(newInterval[1], interval[1]);
            }
        }
        
        res.insert(res.begin() + index, newInterval);
        
        intervals = res;
    }
    
    vector<vector<int>> getIntervals() {
        return intervals;
    }

private:
    
    vector<vector<int>> intervals;
};

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges* obj = new SummaryRanges();
 * obj->addNum(val);
 * vector<vector<int>> param_2 = obj->getIntervals();
 */
