// Input: nums = [-2,5,-1], lower = -2, upper = 2
// Output: 3
// Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.

class Solution {
public:
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        int size = nums.size();
        
        // 区间[i,j]的和 = sum[j] - sum[i]
        // sum[i] = nums[0] + nums[1] + ... + nums[i]
        
        // multiset会将数值从小到大排序
        multiset<long> sums;
        sums.insert(0);
        
        long sum = 0;
        
        int res = 0;
        
        for (int i = 0; i < size; i++) {
            // sum[i]
            sum += nums[i];
            
            // lower <= sum[i] - sum[j] <= upper
            // sum[i] - upper <= sum[j] <= sum[i] - lower
            
            // lower_bound 是找数组中第一个不小于给定值的数(包括等于情况)
            // upper_bound 是找数组中第一个大于给定值的数
            // 找到对于sum[i]，有多少符合条件的j
            res += distance(sums.lower_bound(sum - upper), sums.upper_bound(sum - lower));
            
            sums.insert(sum);
        }
        
        return res;
    }
};
