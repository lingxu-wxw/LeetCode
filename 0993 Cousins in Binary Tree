// Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
// Output: true

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* findCousins(TreeNode* root, int val, int curDepth, int& depth) {
        if (!root) return NULL;
        
        // 遍历找到x或者y
        if ((root->left && root->left->val == val) || (root->right && root->right->val == val)) {
            depth = curDepth;
            return root;
        }
        
        // 分别向左右孩子继续遍历, 结果是unique的
        TreeNode* left = findCousins(root->left, val, curDepth + 1, depth);
        if (left) {
            return left;
        }
            
        TreeNode* right = findCousins(root->right, val, curDepth + 1, depth);
        if (right) {
            return right;
        }
        
        // 左右孩子都没找到val
        return NULL;
    }
    
    bool isCousins(TreeNode* root, int x, int y) {
        if (!root) return false;
        
        // 防止x和y中有一个是root导致depth错位
        int depthX = -1, depthY = -1;
        
        TreeNode* parentX = findCousins(root, x, 0, depthX);
        TreeNode* parentY = findCousins(root, y, 0, depthY);
        
        // 判断是否找到了结果
        if ((depthX == depthY) && (parentX != parentY)) {
            return true;
        }
        
        return false;
    }
};
